$majorVer = $PSVersionTable.PSVersion.Major
$isPowerShell = ($majorVer -eq 5)
$isPwsh = ($majorVer -eq 7)
$isMSWindows = (!$IsLinux) -and ($isPwsh -or $isPowerShell)

if ($IsLinux) {
    # Linux PowerShell (v7)
    $env:CACHE_PROFILE_DIR = Join-Path -Path $env:HOME -ChildPath ".cache/powershell"
    $env:CACHE_PROFILE = Join-Path -Path $env:CACHE_PROFILE_DIR -ChildPath "cache-profile.ps1"
    $CACHE_PROFILE = $env:CACHE_PROFILE
} else {
    # Windows
    if ($isPowerShell) {
        # Windows PowerShell (v5)
        $env:CACHE_PROFILE_DIR = Join-Path -Path $env:LOCALAPPDATA -ChildPath "Microsoft\Windows\PowerShell"
        $env:CACHE_PROFILE = Join-Path -Path $env:CACHE_PROFILE_DIR -ChildPath "cache-profile-v5.ps1"
        $CACHE_PROFILE = $env:CACHE_PROFILE
    }
    if ($isPwsh) {
        # Windows PowerShell (v7)
        $env:CACHE_PROFILE_DIR = Join-Path -Path $env:LOCALAPPDATA -ChildPath "Microsoft\PowerShell"
        $env:CACHE_PROFILE = Join-Path -Path $env:CACHE_PROFILE_DIR -ChildPath "cache-profile-v7.ps1"
        $CACHE_PROFILE = $env:CACHE_PROFILE
    }
}

$CACHE_PROFILE = $env:CACHE_PROFILE

if ((Test-Path $PROFILE) -and (Test-Path $CACHE_PROFILE)) {
    if ((Get-Item $PROFILE).LastWriteTime -gt (Get-Item $CACHE_PROFILE).LastWriteTime) {
        $cond = $true
    } else {
        $cond = $false
    }
} elseif ((Test-Path $PROFILE) -and !(Test-Path $CACHE_PROFILE)) {
    $cond = $true
} else {
    $cond = $false
}

# env-var
{{ if eq .chezmoi.hostname "TanakaPC" -}}
$GITHUB_USERNAME = "{{ (bitwardenFields "item" "0f17c992-d0fe-4f36-bde8-95d9e2de3a6d").github_username.value }}"
$WIN_HOME = "/mnt/c/Users/{{ (bitwardenFields "item" "0f17c992-d0fe-4f36-bde8-95d9e2de3a6d").windows_user_name.value }}"
$OBSIDIAN_VAULT_ROOT = "{{ (bitwardenFields "item" "0f17c992-d0fe-4f36-bde8-95d9e2de3a6d").obsidian_vault_root_path.value }}"
{{ else -}}
    {{ if eq .chezmoi.os "linux" -}}
$GITHUB_USERNAME = "{{ (rbwFields "dotfiles-chezmoi").github_username.value }}"
        {{ if eq .chezmoi.hostname "azusa" -}}
$OBSIDIAN_VAULT_ROOT = "$HOME/Documents/Obsidian/mimikun"
        {{ else -}}
$WIN_HOME = "/mnt/c/Users/{{ (rbwFields "dotfiles-chezmoi").windows_user_name.value }}"
$OBSIDIAN_VAULT_ROOT = "{{ (rbwFields "dotfiles-chezmoi").obsidian_vault_root_path.value }}"
        {{ end -}}
    {{ else -}}
$GITHUB_USERNAME = "{{ (bitwardenFields "item" "ec557677-82d9-4a61-a4f6-aed300cfb34f").github_username.value }}"
$WIN_HOME = "/mnt/c/Users/{{ (bitwardenFields "item" "ec557677-82d9-4a61-a4f6-aed300cfb34f").windows_user_name.value }}"
$OBSIDIAN_VAULT_ROOT = "{{ (bitwardenFields "item" "ec557677-82d9-4a61-a4f6-aed300cfb34f").obsidian_vault_root_path.value }}"
    {{ end -}}
{{ end -}}

$env:OBSIDIAN_VAULT_ROOT = $OBSIDIAN_VAULT_ROOT
$env:obsidian_vault_root = $OBSIDIAN_VAULT_ROOT
$obsidian_vault_root = $OBSIDIAN_VAULT_ROOT

if ($IsLinux) {
    $env:GHQ_ROOT = Join-Path -Path $env:HOME -ChildPath "ghq"
} else {
    $env:GHQ_ROOT = Join-Path -Path $env:USERPROFILE -ChildPath "ghq"
}

$GHQ_ROOT = $env:GHQ_ROOT

if ($cond) {
    New-Item $env:CACHE_PROFILE_DIR -ItemType Directory -Force 2>&1 > $null
    New-Item $env:CACHE_PROFILE -ItemType File -Value "" -Force 2>&1 > $null

    # using namespace first
    $namespace1 = "using namespace System.Management.Automation.Language"
    $namespace2 = "using namespace System.Management.Automation"
    Write-Output $namespace1 >> $env:CACHE_PROFILE
    Write-Output $namespace2 >> $env:CACHE_PROFILE

    # starship setup
    Write-Output "# cache starship setup" >> $env:CACHE_PROFILE
    starship init powershell --print-full-init >> $env:CACHE_PROFILE

    # starship completion
    Write-Output "# cache starship completion" >> $env:CACHE_PROFILE
    $starship_completion = starship completions powershell |
        ForEach-Object { $_ -replace $namespace1, "" } |
        ForEach-Object { $_ -replace $namespace2, "" }
    Write-Output $starship_completion >> $env:CACHE_PROFILE

    # wezterm completion
    Write-Output "# cache wezterm completion" >> $env:CACHE_PROFILE
    $wezterm_completion = wezterm shell-completion --shell power-shell |
        ForEach-Object { $_ -replace $namespace1, "" } |
        ForEach-Object { $_ -replace $namespace2, "" }
    Write-Output $wezterm_completion >> $env:CACHE_PROFILE

    # rustup completion
    Write-Output "# cache rustup completion" >> $env:CACHE_PROFILE
    $rustup_completion = rustup completions powershell |
        ForEach-Object { $_ -replace $namespace1, "" } |
        ForEach-Object { $_ -replace $namespace2, "" }
    Write-Output $rustup_completion >> $env:CACHE_PROFILE

    # chezmoi completion
    Write-Output "# cache chezmoi completion" >> $env:CACHE_PROFILE
    chezmoi completion powershell >> $env:CACHE_PROFILE

    # github-cli completion
    Write-Output "# cache github-cli completion" >> $env:CACHE_PROFILE
    gh completion -s powershell >> $env:CACHE_PROFILE

    # zoxide setup
    Write-Output "# cache zoxide setup" >> $env:CACHE_PROFILE
    zoxide init powershell >> $env:CACHE_PROFILE

    # zoxide completion
    Write-Output "# cache zoxide completion" >> $env:CACHE_PROFILE
    $zoxideCompleteFilePath = Join-Path -Path $env:GHQ_ROOT -ChildPath "github.com\ajeetdsouza\zoxide\contrib\completions\_zoxide.ps1"
    if (Test-Path($zoxideCompleteFilePath)) {
        $zoxide_completion = Get-Content $zoxideCompleteFilePath |
        ForEach-Object { $_ -replace $namespace1, "" } |
        ForEach-Object { $_ -replace $namespace2, "" }
    }
    Write-Output $zoxide_completion >> $env:CACHE_PROFILE

    # ripgrep completion
    Write-Output "# cache ripgrep completion" >> $env:CACHE_PROFILE
    $ripgrep_completion = rg --generate complete-powershell |
        ForEach-Object { $_ -replace $namespace1, "" } |
        ForEach-Object { $_ -replace $namespace2, "" }
    Write-Output $ripgrep_completion >> $env:CACHE_PROFILE

    # rbw completion
    Get-Command rbw -ErrorAction Ignore | Out-Null
    $res = $?
    if ($res) {
        Write-Output "# cache rbw completion" >> $env:CACHE_PROFILE
        $rbw_completion = rbw gen-completions powershell |
            ForEach-Object { $_ -replace $namespace1, "" } |
            ForEach-Object { $_ -replace $namespace2, "" }
        Write-Output $rbw_completion >> $env:CACHE_PROFILE
    }

    # glow completion
    Get-Command glow -ErrorAction Ignore | Out-Null
    $res = $?
    if ($res) {
        Write-Output "# cache glow completion" >> $env:CACHE_PROFILE
        $glow_completion = glow completion powershell |
            ForEach-Object { $_ -replace $namespace1, "" } |
            ForEach-Object { $_ -replace $namespace2, "" }
        Write-Output $glow_completion >> $env:CACHE_PROFILE
    }

    # mdbook completion
    Get-Command mdbook -ErrorAction Ignore | Out-Null
    $res = $?
    if ($res) {
        Write-Output "# cache mdbook completion" >> $env:CACHE_PROFILE
        $mdbook_completion = mdbook completions powershell |
            ForEach-Object { $_ -replace $namespace1, "" } |
            ForEach-Object { $_ -replace $namespace2, "" }
        Write-Output $mdbook_completion >> $env:CACHE_PROFILE
    }
}

# Loading from cache profile
. $env:CACHE_PROFILE

#posh-git git
Import-Module posh-git
# PSReadLine
Import-Module PSReadLine

if ($isMSWindows) {
    # gsudo
    Import-Module gsudoModule
    # scoop completion
    $scoopCompletionPath = Join-Path $env:USERPROFILE -ChildPath "scoop\modules\scoop-completion"
    Import-Module $scoopCompletionPath
}

$env:EDITOR = "nvim"


if ($isMSWindows) {
    $env:VimConfig = Join-Path $env:USERPROFILE -ChildPath "vimfiles"
    $env:CHEZMOI_DIR = Join-Path $env:USERPROFILE -ChildPath ".local\share\chezmoi"
    $env:WIN_HOME = $env:USERPROFILE
} else {
    $env:VimConfig = Join-Path $env:HOME -ChildPath ".vim"
    $env:CHEZMOI_DIR = Join-Path $env:HOME -ChildPath ".local\share\chezmoi"
}

{{ if (ne .chezmoi.hostname "azusa") }}
# Windows Documents folder
$env:WIN_DOCUMENTS = Join-Path -Path $env:WIN_HOME -ChildPath "Documents"
$env:win_documents = $env:WIN_DOCUMENTS
$win_documents = $env:win_documents

# Windows Downloads folder
$env:WIN_DOWNLOADS = Join-Path -Path $env:WIN_HOME -ChildPath "Downloads"
$env:win_downloads = $env:WIN_DOWNLOADS
$win_downloads = $env:win_downloads
$env:windl = $env:win_downloads
$windl = $env:windl

# Windows Desktop folder
$env:WIN_DESKTOP = Join-Path -Path $env:WIN_HOME -ChildPath "Desktop"
$env:win_desktop = $env:WIN_DESKTOP
$win_desktop = $env:win_desktop
{{ end }}

$tmp = Join-Path -Path $env:GHQ_ROOT -ChildPath "github.com"
$env:WORKSPACE = Join-Path -Path $tmp -ChildPath $env:GITHUB_USERNAME
$env:WORKSPACE_MIMIKUN = Join-Path -Path $tmp -ChildPath "mimikun"
$env:NVIM_DEV_PLUGINS = Join-Path $env:WORKSPACE_MIMIKUN -ChildPath "dev-plugins"

$WORKSPACE = $env:WORKSPACE
$WORKSPACE_MIMIKUN = $env:WORKSPACE_MIMIKUN
$NVIM_DEV_PLUGINS = $env:NVIM_DEV_PLUGINS

# Obsidian
{{ if (ne .chezmoi.hostname "azusa") }}
$env:obsidian_vault_root_path = Join-Path -Path $env:WIN_DOCUMENTS -ChildPath "$env:obsidian_vault_root"
$obsidian_vault_root_path = $env:obsidian_vault_root_path

$env:obsidian_vault_path = $env:obsidian_vault_root_path
$obsidian_vault_path = $env:obsidian_vault_path

$env:obsidian_dailynote_path = Join-Path -Path $env:obsidian_vault_path -ChildPath "001_DailyNotes"
$obsidian_dailynote_path = $env:obsidian_dailynote_path

$env:obsidian = $env:obsidian_dailynote_path
$obsidian = $env:obsidian
{{ end }}

# alias bd
function Set-ParentLocation() {
    Set-Location ..
}
Set-Alias -Name bd -Value Set-ParentLocation

# alias touch
Set-Alias -Name touch -Value New-Item

# alias chezmoi cd
function ChezmoiCd {
    chezmoi cd
}
Set-Alias -Name chec -Value ChezmoiCd

# alias chezmoi apply
function ChezmoiApply {
    chezmoi apply
}
Set-Alias -Name chep -Value ChezmoiApply

# alias ls eza
Get-Command eza -ErrorAction Ignore | Out-Null
$res = $?
if ($res) {
    if ($isMSWindows) {
        Remove-Item -Path Alias:ls
    }
    Set-Alias -Name ls -Value eza
    # eza aliases
    function Invoke-EzaTree() {
        eza -T
    }
    Set-Alias -Name lt -Value Invoke-EzaTree
    function Invoke-EzaLa() {
        eza -la
    }
    Set-Alias -Name la -Value Invoke-EzaLa
}

# alias vim
Get-Command neovim -ErrorAction Ignore | Out-Null
$res = $?
if ($res) {
    # alias vim neovim
    Set-Alias -Name vim -Value neovim
}

# alias gcd
$env:PSGhqPath = Join-Path -Path $env:GHQ_ROOT -ChildPath "github.com/mimikun/PSGhq/Set-GhqLocation.ps1"
if (Test-Path($env:PSGhqPath)) {
    . $env:PSGhqPath
    Set-Alias -Name gcd -Value Set-GhqLocation
}

# alias update_cargo_package
$env:UpdateCargoPackagePath = Join-Path -Path $env:GHQ_ROOT -ChildPath "github.com/mimikun/update_cargo_packages/Invoke-UpdateCargoPackage.ps1"
if (Test-Path($env:UpdateCargoPackagePath)) {
    . $env:UpdateCargoPackagePath
    Set-Alias -Name update_cargo_package -Value Invoke-UpdateCargoPackage
}

if ($isMSWindows) {
    # pueued auto start
    Get-Process pueued -ErrorAction Ignore | Out-Null
    $res = $?
    if (!$res) {
        pueued -d
    }

    # XXX: DEPRECATED
    function Invoke-ShowDeprecateMessage() {
        $toolName = "wsl_restart"
        Write-Output "$toolName is deprecated."
    }
    Set-Alias -Name wsl_restart Invoke-ShowDeprecateMessage

    # alias wsl_shutdown Invoke-WslTerminateUbuntu
    function Invoke-WslTerminateUbuntu() {
        if ($env:COMPUTERNAME -eq "TANAKAPC") {
            wsl --terminate Ubuntu-20.04
        } else {
            wsl --terminate Ubuntu
        }
    }
    Set-Alias -Name wsl_shutdown Invoke-WslTerminateUbuntu

    # alias wsl_status Invoke-WslStatus
    function Invoke-WslStatus {
        wsl -l -v
    }
    Set-Alias -Name wsl_status Invoke-WslStatus

    # alias bun_upgrade Invoke-BunUpgrade
    function Invoke-BunUpgrade() {
        Invoke-RestMethod "bun.sh/install.ps1" | Invoke-Expression
    }
    Set-Alias -Name bun_upgrade Invoke-BunUpgrade
}

# alias editorconfig Invoke-GenerateEditorConfig
function Invoke-GenerateEditorConfig() {
    Get-Item -Path .\.editorconfig -ErrorAction Ignore
    $res = $?
    if (!$res) {
        Write-Output ".editorconfig not exist."
        Write-Output "Creating .editorconfig."
        Copy-Item -Path $env:USERPROFILE\.editorconfig-template -Destination .\.editorconfig
    }
}
Set-Alias -Name editorconfig Invoke-GenerateEditorConfig

if ($IsLinux) {
    # alias chezmoi_cd
    function Set-ChezmoiDirLocation() {
        Set-Location $env:CHEZMOI_DIR
    }
    Set-Alias -Name chezmoi_cd -Value Set-ChezmoiDirLocation
}

# inshellisense
if ($IsLinux) {
    # Linux PowerShell (v7)
    $InshellisensePath = Join-Path $env:HOME -ChildPath ".inshellisense/key-bindings-pwsh.ps1"
    if (Test-Path $InshellisensePath -PathType Leaf) {
        . $InshellisensePath
    }
} else {
    # Windows
    if ($isPowerShell) {
        # Windows PowerShell (v5)
        $InshellisensePath = Join-Path $env:USERPROFILE -ChildPath ".inshellisense/key-bindings-powershell.ps1"
        if (Test-Path $InshellisensePath -PathType Leaf) {
            . $InshellisensePath
        }
    }
    if ($isPwsh) {
        # Windows PowerShell (v7)
        $InshellisensePath = Join-Path $env:USERPROFILE -ChildPath ".inshellisense/key-bindings-pwsh.ps1"
        if (Test-Path $InshellisensePath -PathType Leaf) {
            . $InshellisensePath
        }
    }
}

# aqua
# The directory path where aqua install tools
# default (linux and macOS): ${XDG_DATA_HOME:-$HOME/.local/share}/aquaproj-aqua
# default (windows): ${HOME/AppData/Local}/aquaproj-aqua
if ($IsLinux) {
    $aqua_root_dir = Join-Path -Path $env:HOME -ChildPath ".local/share/aqua"
    $aqua_config_dir = Join-Path -Path $env:HOME -ChildPath ".config/aqua"
} else {
    $aqua_root_dir = Join-Path -Path $env:USERPROFILE -ChildPath "AppData/Local/aquaproj-aqua"
    $aqua_config_dir = Join-Path -Path $env:USERPROFILE -ChildPath ".config/aqua"
}

$env:AQUA_ROOT_DIR = $aqua_root_dir
$env:AQUA_CONFIG_DIR = $aqua_config_dir
$env:AQUA_BIN = Join-Path -Path $env:AQUA_ROOT_DIR -ChildPath "bin"

Get-Command aqua -ErrorAction Ignore | Out-Null
$res = $?
if ($res) {
    # Log level
    #$env:AQUA_LOG_LEVEL = "info"
    # configuration file path
    $env:AQUA_CONFIG = Join-Path -Path $env:AQUA_CONFIG_DIR -ChildPath "aqua.yaml"
    # global configuration file paths separated by semicolon :
    $env:AQUA_GLOBAL_CONFIG = $env:AQUA_CONFIG
    # policy file paths separated by semicolon :
    $env:AQUA_POLICY_CONFIG = Join-Path -Path $env:AQUA_CONFIG_DIR -ChildPath "policy.yaml"
    # If true, Policy is disabled (aqua >= v2.1.0)
    # NOTE: It's just idiot to care about security.
    $env:AQUA_DISABLE_POLICY = $True
    # If true, Lazy Install is disabled (aqua >= v2.9.0)
    #$env:AQUA_DISABLE_LAZY_INSTALL = $True
    # The maximum number of packages which are installed in parallel at the same time
    #$env:AQUA_MAX_PARALLELISM = 5
    # GITHUB_TOKEN: GitHub Access Token.
    # This is required to install private repository's package
    #$env:AQUA_GITHUB_TOKEN = ""
    # Log color setting (always|auto|never)
    #$env:AQUA_LOG_COLOR = "always"
    # The progress bar is disabled by default, but you can enable it by setting the environment variable AQUA_PROGRESS_BAR to true
    $env:AQUA_PROGRESS_BAR = $True
    # Other
    #$env:AQUA_GOOS = ""
    #$env:AQUA_GOARCH = ""
    # AQUA_X_SYS_EXEC
    # https://aquaproj.github.io/docs/reference/execve-2/
    #$env:AQUA_X_SYS_EXEC = $False
    # If true, aqua outputs additional information such as description and link #2027 #2062 (aqua >= v2.9.0)
    #$env:AQUA_GENERATE_WITH_DETAIL = $False
}

# mocword dict
if ($IsLinux) {
    $env:MOCWORD_DATA = Join-Path -Path $env:HOME -ChildPath ".cache/mocword.sqlite"
} else {
    $env:MOCWORD_DATA = Join-Path -Path $env:LOCALAPPDATA -ChildPath "Temp/mocword.sqlite"
}

$MOCWORD_DATA = $env:MOCWORD_DATA

# Neovide env-vars
<#
## Functionality
### Frame
$env:NEOVIDE_FRAME = "full"
$env:NEOVIDE_FRAME = "none"

### Maximized
# NOTE: not documented
$env:NEOVIDE_MAXIMIZED = $true

### Multigrid
# NOTE: not documented
$env:NEOVIDE_NO_MULTIGRID = $true

### Fork
$env:NEOVIDE_FORK = 0

### No Idle
$env:NEOVIDE_IDLE = 0

### sRGB
$env:NEOVIDE_SRGB = 0

### Tabs
$env:NEOVIDE_TABS = 0

### No VSync
$env:NEOVIDE_VSYNC = 0

### Neovim Binary
$env:NEOVIM_BIN = "/path/to/nvim"

if ($IsLinux) {
### Wayland / X11
# NOTE: Incomprehensible
    $env:NEOVIDE_APP_ID = "wayland_app_id"
    $env:NEOVIDE_WM_CLASS_INSTANCE = "x11_wm_class_instance"
    $env:NEOVIDE_WM_CLASS = "x11_wm_class"
}
#>

# PSReadLine settings
# C-g gcd
Set-PSReadLineKeyHandler -Key Ctrl+g -ScriptBlock { Set-GhqLocation }
# C-d exit
Set-PSReadLineKeyHandler -Key Ctrl+d -Function DeleteCharOrExit
