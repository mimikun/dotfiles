# Global
set -x LANG "en_US.UTF-8"
set -x LC_ALL "en_US.UTF-8"
set -x GHQ_ROOT $HOME/ghq
set -x GHQ_SELECTOR fzf
set -x PIPENV_VENV_IN_PROJECT 1
set -x TODAY (date +"%Y/%m/%d")
set -x TZ "Asia/Tokyo"

# shell prompts
# "oh-my-posh", "starship", "tide", "hydro", pure-fish"
set -x USE_SHELL_PROMPT "tide"

# neovim version manager
# "nvs", "bob"
set -x USE_NVIM_VERSION_MANAGER "bob"

# XDG Base Directory
set -x XDG_CONFIG_HOME $HOME/.config
set -x XDG_CACHE_HOME $HOME/.cache
set -x XDG_DATA_HOME $HOME/.local/share
set -x XDG_STATE_HOME $HOME/.local/state

# Fish paths
set -x FISH_CONFIG_DIR $XDG_CONFIG_HOME/fish
set -x FISH_COMPLETIONS_DIR $FISH_CONFIG_DIR/completions
set -x FISH_FUNCTIONS_DIR $FISH_CONFIG_DIR/functions
set -x FISH_CACHE_DIR $XDG_CACHE_HOME/fish

set -x CONFIG_FISH $FISH_CONFIG_DIR/config.fish
set -x CACHE_CONFIG_FISH $FISH_CACHE_DIR/config.fish

{{ if (eq .chezmoi.hostname "azusa") -}}
set -x GTK_IM_MODULE "fcitx"
set -x QT_IM_MODULE "fcitx"
set -x XMODIFIERS "@im=fcitx"
# CapsLock to Ctrl
setxkbmap -option ctrl:nocaps
# TODO: set browser name
set -x BROWSER "vivaldi"
{{ else -}}
set -x BROWSER "wsl-open"
{{ end -}}

# env-vars
# GITHUB_USERNAME
{{ if (isExecutable "/usr/local/bin/this_is_work_pc") }}
set -x GITHUB_USERNAME "{{ (rbwFields "dotfiles-chezmoi").github_username.value }}"
{{ else -}}
set -x GITHUB_USERNAME "mimikun"
{{ end -}}
#if set -q WORK_PC
#else
#end

# WIN_HOME
{{ if (eq .chezmoi.hostname "Wakamo") -}}
set -x WIN_HOME "/mnt/c/Users/mimikun"
{{ else -}}
set -x WIN_HOME "/mnt/c/Users/{{ (rbwFields "dotfiles-chezmoi").windows_user_name.value }}"
{{ end -}}

# OBSIDIAN_VAULT_ROOT
{{ if (eq .chezmoi.hostname "azusa") -}}
set -x OBSIDIAN_VAULT_ROOT "Obsidian/mimikun"
{{ else if (eq .chezmoi.hostname "Wakamo") -}}
set -x OBSIDIAN_VAULT_ROOT "Obsidian/mimikun"
{{ else -}}
set -x OBSIDIAN_VAULT_ROOT "{{ (rbwFields "dotfiles-chezmoi").obsidian_vault_root_path.value }}"
{{ end -}}

# LG_CONFIG_FILE
{{ if (eq .chezmoi.hostname "azusa") -}}
set -x LG_CONFIG_FILE "$XDG_CONFIG_HOME/lazygit/linux_config.yml"
{{ else -}}
set -x LG_CONFIG_FILE "$XDG_CONFIG_HOME/lazygit/wsl_config.yml"
{{ end -}}

set -x WORKSPACE "$GHQ_ROOT/github.com/$GITHUB_USERNAME"
set -x WORKSPACE_MIMIKUN "$GHQ_ROOT/github.com/mimikun"
set -x NVIM_DEV_PLUGINS "$WORKSPACE_MIMIKUN/dev-plugins"

# some services PATs
{{ if (isExecutable "/usr/local/bin/this_is_work_pc") }}
set -x GITHUB_PAT "{{ (rbwFields "dotfiles-chezmoi").github_pat.value }}"
set -x CODEBERG_PAT "{{ (rbwFields "dotfiles-chezmoi").codeberg_pat.value }}"
set -x GITEA_PAT "{{ (rbwFields "dotfiles-chezmoi").gitea_pat.value }}"
{{ end -}}
#if set -q WORK_PC
#end

{{ if (eq .chezmoi.hostname "azusa") -}}
set -x obsidian_vault_root_path "$HOME/Documents/$OBSIDIAN_VAULT_ROOT"
{{ else -}}
set -x windl "$WIN_HOME/Downloads"
set -x WIN_DESKTOP "$WIN_HOME/Desktop"
set -x WIN_DOCUMENTS "$WIN_HOME/Documents"
set -x obsidian_vault_root_path "$WIN_DOCUMENTS/$OBSIDIAN_VAULT_ROOT"
set -x DISPLAY ":0"
{{ end -}}

set -x obsidian_vault_path $obsidian_vault_root_path
set -x obsidian_dailynote_path $obsidian_vault_path/001_DailyNotes
set -x obsidian $obsidian_dailynote_path
set dailynote_slug (date +"%Y年%m月%d日")
set -x today_dailynote "$obsidian_dailynote_path/$dailynote_slug.md"

set -x CHEZMOI_DIR "$XDG_DATA_HOME/chezmoi"

set -x LOCALBIN $HOME/.local/bin

set -x PATH /usr/bin $PATH
set -x PATH /usr/local/bin $PATH
set -x PATH /usr/local/sbin $PATH
set -x PATH $HOME/go/bin $PATH
set -x PATH $HOME/.cargo/bin $PATH

set -x DENO_INSTALL $HOME/.deno
set -x PATH $DENO_INSTALL/bin $PATH

# starship
set -x STARSHIP_CONFIG_DIR $XDG_CONFIG_HOME/starship
set -x STARSHIP_CONFIG $STARSHIP_CONFIG_DIR/starship.toml
set -x STARSHIP_CACHE $XDG_CACHE_HOME/starship

# tide
set -x TIDE_STYLE 'Classic'
set -x TIDE_PROMPT_COLORS 'True color'
set -x TIDE_CLASSIC_PROMPT_COLOR 'Light'
set -x TIDE_SHOW_TIME '24-hour format'
set -x TIDE_CLASSIC_PROMPT_SEPARATORS 'Angled'
set -x TIDE_POWERLINE_PROMPT_HEADS 'Round'
set -x TIDE_POWERLINE_PROMPT_TAILS 'Round'
set -x TIDE_POWERLINE_PROMPT_STYLE 'Two lines, character'
set -x TIDE_PROMPT_CONNECTION 'Disconnected'
set -x TIDE_POWERLINE_RIGHT_PROMPT_FRAME 'No'
set -x TIDE_PROMPT_CONNECTION_ANDOR_FRAME_COLOR 'Light'
set -x TIDE_PROMPT_SPACING 'Sparse'
set -x TIDE_ICONS 'Many icons'
set -x TIDE_TRANSIENT 'No'

# bob-nvim
set -x BOB_CONFIG $XDG_CONFIG_HOME/bob/config.toml

# nvs
set -x NVS_BIN_DIR $XDG_DATA_HOME/nvs/bin

#Ubuntu
set -x PATH /bin $PATH
set -x PATH /usr/games $PATH
set -x PATH /usr/sbin $PATH
set -x PATH /usr/local/games $PATH
set -x PATH /sbin $PATH
set -x PATH /snap/bin $PATH
set -x PATH $HOME/.fzf/bin $PATH
set -x PATH $HOME/.local/bin/ $PATH
set -x PATH $HOME/.npm-global/bin $PATH
set -x PATH $HOME/.dotnet/tools/ $PATH
set -x PATH $HOME/.gem/ruby/2.7.0/bin/ $PATH
set -x PATH $HOME/depot_tools $PATH
set -x PATH /usr/local/go/bin/ $PATH

set -x EDITOR nvim
set -x LESS "-R"
set -x LESSCHARSET "utf-8"
set -x PAGER less
set -x GIT_PAGER less

# Bun
set -x BUN_INSTALL $HOME/.bun
set -x PATH $BUN_INSTALL/bin $PATH

# fly.io
set -x FLYCTL_INSTALL $HOME/.fly
set -x PATH $FLYCTL_INSTALL/bin $PATH

# pnpm
set -x PNPM_HOME $XDG_DATA_HOME/pnpm
set -x PATH "$PNPM_HOME" $PATH

# work pc only tools?
{{ if (isExecutable "/usr/local/bin/this_is_work_pc") }}
# JVM path
set -x JAVA_HOME $XDG_CACHE_HOME/coursier/arc/https/github.com/AdoptOpenJDK/openjdk8-binaries/releases/download/jdk8u292-b10/OpenJDK8U-jdk_x64_linux_hotspot_8u292b10.tar.gz/jdk8u292-b10
set -x PATH $XDG_CACHE_HOME/coursier/arc/https/github.com/AdoptOpenJDK/openjdk8-binaries/releases/download/jdk8u292-b10/OpenJDK8U-jdk_x64_linux_hotspot_8u292b10.tar.gz/jdk8u292-b10/bin $PATH

# coursier path
set -x PATH $XDG_DATA_HOME/coursier/bin $PATH
# windowsのpathとかぶる問題防止
alias cs $XDG_DATA_HOME/coursier/bin/cs
{{ end -}}

# cabal config
set -x PATH $HOME/.cabal/bin $PATH
set -x PATH $HOME/.ghcup/bin $PATH

# https://github.com/antfu/ni config
if command -v ni >/dev/null 2>&1
    set -x NI_CONFIG_FILE $XDG_CONFIG_HOME/ni/.nirc
end

# codon config
if command -v codon >/dev/null 2>&1
    set -x PATH $HOME/.codon/bin $PATH
end

# Rye
set -x PATH $HOME/.rye/shims $PATH

# luarocks
set -x PATH $HOME/.luarocks/bin $PATH

set -x LUA_PATH "/usr/local/share/lua/5.3/?.lua"
set -x LUA_PATH "/usr/local/share/lua/5.3/?/init.lua" $LUA_PATH
set -x LUA_PATH "/usr/local/lib/lua/5.3/?.lua" $LUA_PATH
set -x LUA_PATH "/usr/local/lib/lua/5.3/?/init.lua" $LUA_PATH
set -x LUA_PATH "./?.lua" $LUA_PATH
set -x LUA_PATH "./?/init.lua" $LUA_PATH
set -x LUA_PATH "$HOME/.luarocks/share/lua/5.3/?.lua" $LUA_PATH
set -x LUA_PATH "$HOME/.luarocks/share/lua/5.3/?/init.lua" $LUA_PATH

set -x LUA_CPATH "/usr/local/lib/lua/5.3/?.so"
set -x LUA_CPATH "/usr/local/lib/lua/5.3/loadall.so" $LUA_CPATH
set -x LUA_CPATH "./?.so" $LUA_CPATH
set -x LUA_CPATH "$HOME/.luarocks/lib/lua/5.3/?.so" $LUA_CPATH

# dotnet-core completions
if command -v dotnet >/dev/null 2>&1
    complete -f -c dotnet -a "(dotnet complete)"
end

# aqua
set -x AQUA_ROOT_DIR $XDG_DATA_HOME/aqua
set -x AQUA_CONFIG_DIR $XDG_CONFIG_HOME/aqua/
set -x AQUA_BIN $AQUA_ROOT_DIR/bin

set -x PATH $AQUA_BIN $PATH

set -x AQUA_CONFIG $AQUA_CONFIG_DIR/aqua.yaml
set -x AQUA_GLOBAL_CONFIG $AQUA_CONFIG
set -x AQUA_POLICY_CONFIG $AQUA_CONFIG_DIR/policy.yaml
# If true, Policy is disabled
# NOTE: It's just idiot to care about security.
set -x AQUA_DISABLE_POLICY true
# The maximum number of packages which are installed in parallel at the same time
{{ if (eq .chezmoi.hostname "Wakamo") -}}
# Ryzen 7 9800X3D(8 Core 16 Thread)
set -x AQUA_MAX_PARALLELISM 3
{{ else if (eq .chezmoi.hostname "Izuna") -}}
# Ryzen 9 3900X(12 Core 24 Thread)
set -x AQUA_MAX_PARALLELISM 5
{{ else -}}
# Other
set -x AQUA_MAX_PARALLELISM 1
{{ end -}}
set -x AQUA_PROGRESS_BAR true
set -x AQUA_GITHUB_TOKEN "{{ (rbwFields "dotfiles-chezmoi").aqua_github_token.value }}"

# inshellisense
if test -f "$HOME/.inshellisense/key-bindings.fish"
    source "$HOME/.inshellisense/key-bindings.fish"
end

# PHP composer
set -x COMPOSER_CONFIG_HOME $XDG_CONFIG_HOME/composer
set -x COMPOSER_BIN_DIR $COMPOSER_CONFIG_HOME/vendor/bin

set -x PATH $COMPOSER_BIN_DIR $PATH

# Julia
set -x PATH "$HOME/.juliaup/bin" $PATH

# mocword dict
set -x MOCWORD_DATA "$XDG_CACHE_HOME/mocword.sqlite"

# Neovide env-vars
## Functionality
### Frame
#set -x NEOVIDE_FRAME "full"
#set -x NEOVIDE_FRAME "none"
# macOS Only
#set -x NEOVIDE_FRAME "transparent"
# macOS Only
#set -x NEOVIDE_FRAME "buttonless"

### Maximized
# NOTE: not documented
#set -x NEOVIDE_MAXIMIZED true

### Multigrid
# NOTE: not documented
#set -x NEOVIDE_NO_MULTIGRID true

### Fork
#set -x NEOVIDE_FORK 0

### No Idle
#set -x NEOVIDE_IDLE 0

### Title
# macOS Only
# NOTE: not documented
#set -x NEOVIDE_TITLE_HIDDEN false

### sRGB
#set -x NEOVIDE_SRGB 0

### Tabs
#set -x NEOVIDE_TABS 0

### No VSync
#set -x NEOVIDE_VSYNC 0

### Neovim Binary
#set -x NEOVIM_BIN "/path/to/nvim"

### Wayland / X11
# Linux Only
# NOTE: Incomprehensible
#set -x NEOVIDE_APP_ID "wayland_app_id"
#set -x NEOVIDE_WM_CLASS_INSTANCE "x11_wm_class_instance"
#set -x NEOVIDE_WM_CLASS "x11_wm_class"

# nimble
set -x PATH $HOME/.nimble/bin $PATH

# age public keys
set -x AGE_PUBKEY_HOME "age1cktdwc8u4z76kawluyswaruyeg7eg6078rw3t0kkmx5wqkk40d2qzajn8y"
set -x AGE_PUBKEY_WORK "age1n03v0casqk2djs2jw3xq5ldpdjtp2s6r0u3uhtmd7zv9j2xuyf6qpl9x7l"
# TODO: config
set -x AGE_PUBKEY_AZUSA ""

{{ if (isExecutable "/usr/local/bin/this_is_work_pc") -}}
set -x AGE_PUBKEY "$AGE_PUBKEY_HOME"
{{ else -}}
set -x AGE_PUBKEY "$AGE_PUBKEY_WORK"
{{ end -}}
#if set -q WORK_PC
#else
#end

# golang
set -x GOPATH $HOME/go
set -x GOBIN $GOPATH/bin
set -x PATH $GOBIN $PATH

# zettelkasten
set -x zettelkasten_root "$GHQ_ROOT/codeberg.org/mimikun/zettelkasten"

# forgit
set -x PATH $FISH_CONFIG_DIR/conf.d/bin $PATH
set -x FORGIT_NO_ALIASES true

# Claude Desktop
set -x CLAUDE_DESKTOP_PATH $WIN_HOME/AppData/Roaming/Claude.json
set -x CLAUDE_DESKTOP_CONFIG $CLAUDE_DESKTOP_PATH/claude_desktop_config.json

## aliases
alias rm "rm -i"
alias mkdir "mkdir -p"
alias untar "tar xvf"
alias patch "patch -p1 <"
alias imgcat "wezterm imgcat"
alias pip "python3 -m pip"
alias pipx "python3 -m pipx"

## abbrs
# disable sudo rm
abbr --add --command sudo rm 'echo "sudo rm は使用禁止"'

# pueued.service manage shortcuts
abbr --add pueued_enable "systemctl --user enable pueue"
abbr --add pueued_start "systemctl --user start pueue"
abbr --add pueued_restart "systemctl --user restart pueue"

# chezmoi abbrs
if command -v chezmoi >/dev/null 2>&1
    abbr --add ccd "chezmoi cd"
    abbr --add chd "chezmoi cd"
    abbr --add chec "chezmoi cd"
    abbr --add cap "chezmoi apply"
    abbr --add chp "chezmoi apply"
    abbr --add chep "chezmoi apply"
end

# pueue abbrs
if command -v pueue >/dev/null 2>&1
    abbr --add pu pueue
    abbr --add puc "pueue clean -s"
    abbr --add pucf "pueue clean"
    abbr --add puf "pueue follow"
    abbr --add pul "pueue log"
    abbr --add pum "pueue | more"
    abbr --add puq "pueue enqueue"
end

# trashy abbrs
if command -v trashy >/dev/null 2>&1
    abbr --add trash "trashy"
end

# gh cli abbrs
if command -v gh >/dev/null 2>&1
    abbr --add ghview "gh repo view -w"
    abbr --add ghissue "gh issue ls"
end

# rage abbrs
if command -v rage >/dev/null 2>&1
    abbr --add ragee "rage -e -r $AGE_PUBKEY"
    abbr --add raged "rage -d -i ~/.age/key.txt"
end

# ls abbrs
## eza
# TODO: config now
if command -v eza >/dev/null 2>&1
    abbr --add ls "eza --color=always --icons=always --group-directories-first"
    abbr --add la "eza --color=always --icons=always --group-directories-first --all"
    abbr --add l1 "eza --color=always --icons=always --group-directories-first --oneline"

    abbr --add ll "eza --color=always --icons=always --group-directories-first --long --header"
    abbr --add lla "eza --color=always --icons=always --group-directories-first --long --header --all"
    abbr --add ll1 "eza --color=always --icons=always --group-directories-first --long --header --oneline"

    abbr --add lt "eza --color=always --icons=always --group-directories-first --tree"
    abbr --add lta "eza --color=always --icons=always --group-directories-first --tree --all"
    abbr --add lt1 "eza --color=always --icons=always --group-directories-first --tree --oneline"
    abbr --add llt "eza --color=always --icons=always --group-directories-first --tree --long --header"
end

## lla
# TODO: config now
#if command -v lla >/dev/null 2>&1
#    abbr --add ls "lla --icons --sort-dirs-first --grid --no-dotfiles"
#    abbr --add la "lla --icons --sort-dirs-first --grid"
#    abbr --add l1 "lla --icons --sort-dirs-first --no-dotfiles"
#
#    abbr --add ll "lla --icons --sort-dirs-first --grid --no-dotfiles --long"
#    abbr --add lla "lla --icons --sort-dirs-first --grid --long"
#    abbr --add ll1 "lla --icons --sort-dirs-first --long"
#
#    abbr --add lt "lla --icons --sort-dirs-first --no-dotfiles --tree"
#    abbr --add lta "lla --icons --sort-dirs-first --tree"
#    abbr --add lt1 "lla --icons --sort-dirs-first --no-dotfiles --tree"
#    abbr --add llt "lla --icons --sort-dirs-first --no-dotfiles --long --tree"
#
#    #Use table listing format
#    #--table
#    #Organized grid layout you can use `-g --grid-ignore` to ignore terminal width (Warning: may extend beyond screen)
#    #--grid
#    #Visual representation of file sizes
#    #--sizemap
#    #Group files by time periods
#    #--timeline
#    #Show git status and information
#    #--git
#    #Interactive fuzzy finder (Experimental)
#    #--fuzzy
#end

## lsd
# TODO: config now
#if command -v lsd >/dev/null 2>&1
#    abbr --add ls "lsd --color=always --icons=always --group-dirs=first"
#    abbr --add la "lsd --color=always --icons=always --group-dirs=first --all"
#    abbr --add l1 "lsd --color=always --icons=always --group-dirs=first --oneline"
#
#    abbr --add ls "lsd --color=always --icons=always --group-dirs=first --long --header"
#    abbr --add lla "lsd --color=always --icons=always --group-dirs=first --long --header --all"
#    abbr --add ll1 "lsd --color=always --icons=always --group-dirs=first --long --header --oneline"
#
#    abbr --add lt "lsd --color=always --icons=always --group-dirs=first --tree"
#    abbr --add lta "lsd --color=always --icons=always --group-dirs=first --tree --all"
#    abbr --add lt1 "lsd --color=always --icons=always --group-dirs=first --tree --oneline"
#    abbr --add llt "lsd --color=always --icons=always --group-dirs=first --tree --long --header"
#end

# git subcommands(abbr)
abbr --add --command git ls 'ls-files'
abbr --add --command git graph 'log-graph'
abbr --add --command git file-diff 'diff --name-only'
abbr --add --command git empty 'commit --allow-empty -nm'
abbr --add --command git commitn 'commit -nm'
abbr --add --command git commitan 'commit -anm'
abbr --add --command git amecomi 'commit --amend'
abbr --add --command git amecomin 'commit --amend --no-verify'
abbr --add --command git namecomi 'commit --amend --no-edit'
abbr --add --command git namecomin 'commit --amend --no-edit --no-verify'
abbr --add --command git cleanfetch 'fetch --all --prune --tags --prune-tags'
abbr --add --command git hash 'log --format=%H | sed -n 1p'
abbr --add --command git shallow-clone 'clone --depth 1'
abbr --add --command git staged 'diff --cached'

# emacs from CLI abbrs
abbr --add emacs "emacs --no-window-system"

# util abbrs
abbr --add mmo "make morning-routine"

# https://github.com/ryoppippi/na.fish
abbr --add n -f _na

# forgejo-cli
abbr --add cb "fj --host codeberg.org"

# zellij abbrs
abbr --add zel zellij

# WSL only abbrs
{{ if (ne .chezmoi.hostname "azusa") -}}
abbr --add open wsl-open
{{ end -}}

# cache
if test $CONFIG_FISH -nt $CACHE_CONFIG_FISH
    mkdir -p $FISH_CACHE_DIR
    echo "" > $CACHE_CONFIG_FISH

    # Linuxbrew
    if command -v brew >/dev/null 2>&1
        echo "# cache linuxbrew config" >> $CACHE_CONFIG_FISH
        /home/linuxbrew/.linuxbrew/bin/brew shellenv fish >> $CACHE_CONFIG_FISH
    end

    # mise config
    if command -v mise >/dev/null 2>&1
        echo "# cache mise shell-integration script" >> $CACHE_CONFIG_FISH
        mise activate fish >> $CACHE_CONFIG_FISH
        echo "# alias" >> $CACHE_CONFIG_FISH
        echo 'alias paleovim "$XDG_DATA_HOME/mise/installed/vim/ref-master/vim"' >> $CACHE_CONFIG_FISH
        echo "# abbr" >> $CACHE_CONFIG_FISH
        echo 'abbr --add pvim paleovim' >> $CACHE_CONFIG_FISH
    end

    # NOTE: neovim version manager
    # bob-nvim
    if command -v bob >/dev/null 2>&1
        if test "$USE_NVIM_VERSION_MANAGER" = "bob"
            echo 'set -x PATH "$XDG_DATA_HOME/bob/nvim-bin" $PATH' >> $CACHE_CONFIG_FISH
        end
    end

    # nvs
    if command -v nvs >/dev/null 2>&1
        if test "$USE_NVIM_VERSION_MANAGER" = "nvs"
            echo 'set -x PATH "$NVS_BIN_DIR" $PATH' >> $CACHE_CONFIG_FISH
        end
    end

    echo 'abbr --add vim nvim' >> $CACHE_CONFIG_FISH

    # NOTE: shell prompt
    # starship
    if command -v starship >/dev/null 2>&1
        if test "$USE_SHELL_PROMPT" = "starship"
            echo "# cache starship config" >> $CACHE_CONFIG_FISH
            starship init fish --print-full-init >> $CACHE_CONFIG_FISH
        end
    end

    # oh-my-posh
    if command -v oh-my-posh >/dev/null 2>&1
        if test "$USE_SHELL_PROMPT" = "oh-my-posh"
            echo "# cache oh-my-posh config" >> $CACHE_CONFIG_FISH
            #echo "oh-my-posh init fish | source" >> $CACHE_CONFIG_FISH
            echo "oh-my-posh init fish --config 'https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/refs/heads/main/themes/tokyonight_storm.omp.json' | source" >> $CACHE_CONFIG_FISH
        end
    end

    # navi
    if command -v navi >/dev/null 2>&1
        echo "# cache navi config" >> $CACHE_CONFIG_FISH
        cat $XDG_CONFIG_HOME/navi/navi_widget.fish >> $CACHE_CONFIG_FISH
    end

    # atuin
    if command -v atuin >/dev/null 2>&1
        echo "# cache atuin config" >> $CACHE_CONFIG_FISH
        echo "atuin init fish | source" >> $CACHE_CONFIG_FISH
    end

    # rebar3
    if command -v rebar3 >/dev/null 2>&1
        echo "# cache rebar3 config" >> $CACHE_CONFIG_FISH
        echo 'set -x PATH "$XDG_CACHE_HOME/rebar3/bin" $PATH' >> $CACHE_CONFIG_FISH
    end

    # pay-respects
    if command -v pay-respects >/dev/null 2>&1
        echo "# cache pay-respects config" >> $CACHE_CONFIG_FISH
        echo "pay-respects fish --alias | source" >> $CACHE_CONFIG_FISH
    end

    # jujutsu
    if command -v jj >/dev/null 2>&1
        echo "# cache jujutsu config" >> $CACHE_CONFIG_FISH
        echo "jj util completion fish | source" >> $CACHE_CONFIG_FISH
    end

    # vfox
    # NOTE: can't use now
    #if command -v vfox >/dev/null 2>&1
    #    echo "# cache vfox config" >> $CACHE_CONFIG_FISH
    #    echo "vfox activate fish | source" >> $CACHE_CONFIG_FISH
    #end

    # Equationzhao/g
    # NOTE: can't use now
    #if command -v g >/dev/null 2>&1
    #    echo "# cache Equationzhao/g config" >> $CACHE_CONFIG_FISH
    #    echo "g --init fish | source" >> $CACHE_CONFIG_FISH
    #end

    # work pc only tools
    {{ if (isExecutable "/usr/local/bin/this_is_work_pc") -}}
    echo "# work pc only tools config" >> $CACHE_CONFIG_FISH
    cat $XDG_CONFIG_HOME/{{ (rbwFields "dotfiles-chezmoi").source_work_pc_only_tool_fish_1.value }} >> $CACHE_CONFIG_FISH
    {{ end -}}
    #if set -q WORK_PC
    #else
    #end
end
source $CACHE_CONFIG_FISH

#test ! -e "$HOME/.x-cmd.root/local/data/fish/rc.fish" || source "$HOME/.x-cmd.root/local/data/fish/rc.fish" # boot up x-cmd.

# NOTE: NEED end of config file!
# see: https://github.com/ajeetdsouza/zoxide#installation
zoxide init fish | source

# vim:ft=fish.chezmoitmpl
