# Global
export LANG=en_US.UTF-8
export GHQ_ROOT="$HOME/ghq"
export PIPENV_VENV_IN_PROJECT=1
export TODAY=(date +'%Y/%m/%d')

# XDG Base Directory
export XDG_CONFIG_HOME="$HOME/.config"
export XDG_CACHE_HOME="$HOME/.cache"
export XDG_DATA_HOME="$HOME/.local/share"
export XDG_STATE_HOME="$HOME/.local/state"

{{ if (eq .chezmoi.hostname "azusa") -}}
export GTK_IM_MODULE="fcitx"
export QT_IM_MODULE="fcitx"
export XMODIFIERS="@im=fcitx"
# CapsLock to Ctrl
setxkbmap -option ctrl:nocaps
{{ end -}}

# env-vars
{{ if eq .chezmoi.hostname "TanakaPC" -}}
export GITHUB_USERNAME="{{ (bitwardenFields "item" "0f17c992-d0fe-4f36-bde8-95d9e2de3a6d").github_username.value }}"
export WIN_HOME="/mnt/c/Users/{{ (bitwardenFields "item" "0f17c992-d0fe-4f36-bde8-95d9e2de3a6d").windows_user_name.value }}"
export OBSIDIAN_VAULT_ROOT="{{ (bitwardenFields "item" "0f17c992-d0fe-4f36-bde8-95d9e2de3a6d").obsidian_vault_root_path.value }}"
{{ else -}}
    {{ if eq .chezmoi.os "linux" -}}
export GITHUB_USERNAME="{{ (rbwFields "dotfiles-chezmoi").github_username.value }}"
        {{ if eq .chezmoi.hostname "azusa" -}}
export OBSIDIAN_VAULT_ROOT="$HOME/Documents/Obsidian/mimikun"
export LG_CONFIG_FILE="$XDG_CONFIG_HOME/lazygit/linux_config.yml"
        {{ else -}}
export WIN_HOME="/mnt/c/Users/{{ (rbwFields "dotfiles-chezmoi").windows_user_name.value }}"
export OBSIDIAN_VAULT_ROOT="{{ (rbwFields "dotfiles-chezmoi").obsidian_vault_root_path.value }}"
export LG_CONFIG_FILE="$XDG_CONFIG_HOME/lazygit/wsl_config.yml"
        {{ end -}}
    {{ else -}}
export GITHUB_USERNAME="{{ (bitwardenFields "item" "ec557677-82d9-4a61-a4f6-aed300cfb34f").github_username.value }}"
export WIN_HOME="/mnt/c/Users/{{ (bitwardenFields "item" "ec557677-82d9-4a61-a4f6-aed300cfb34f").windows_user_name.value }}"
export OBSIDIAN_VAULT_ROOT="{{ (bitwardenFields "item" "ec557677-82d9-4a61-a4f6-aed300cfb34f").obsidian_vault_root_path.value }}"
    {{ end -}}
{{ end -}}

export WORKSPACE="$GHQ_ROOT/github.com/$GITHUB_USERNAME"
export WORKSPACE_MIMIKUN="$GHQ_ROOT/github.com/mimikun"
export NVIM_DEV_PLUGINS="$WORKSPACE_MIMIKUN/dev-plugins"

{{ if (ne .chezmoi.hostname "azusa") -}}
export windl="$WIN_HOME/Downloads"
export WIN_DESKTOP="$WIN_HOME/Desktop"
export WIN_DOCUMENTS="$WIN_HOME/Documents"
export obsidian_vault_root_path="$WIN_DOCUMENTS/$OBSIDIAN_VAULT_ROOT"

export DISPLAY=":0"
{{ else -}}
export obsidian_vault_root_path="$OBSIDIAN_VAULT_ROOT"
{{ end -}}

export obsidian_vault_path="$obsidian_vault_root_path"
export obsidian_dailynote_path="$obsidian_vault_path/001_DailyNotes"
export obsidian="$obsidian_dailynote_path"

alias f="fuck"
alias mkdir="mkdir -p"
alias rm="rm -i"

# ls alias
alias ls="eza"
alias l1="ls -1"
alias lt="ls --tree"
alias ll="ls -l"
alias la="ls -la"
alias lat="ls -l -a --tree"
alias lta="ls --tree -a"

export PATH="/usr/bin:$PATH"
export PATH="/usr/local/bin:$PATH"
export PATH="/usr/local/sbin:$PATH"
export PATH="$HOME/go/bin:$PATH"
export PATH="$HOME/.cargo/bin:$PATH"

export DENO_INSTALL="$HOME/.deno"
export PATH="$DENO_INSTALL/bin:$PATH"

#Ubuntu
export PATH="/bin:$PATH"
export PATH="/usr/games:$PATH"
export PATH="/usr/sbin:$PATH"
export PATH="/usr/local/games:$PATH"
export PATH="/sbin:$PATH"
export PATH="/snap/bin:$PATH"
export PATH="$HOME/.fzf/bin:$PATH"
export PATH="$HOME/.local/bin/:$PATH"
export PATH="$HOME/.npm-global/bin:$PATH"
export PATH="$HOME/.dotnet/tools/:$PATH"
export PATH="$HOME/.gem/ruby/2.7.0/bin/:$PATH"
export PATH="$HOME/depot_tools:$PATH"
export EDITOR=nvim
export LESS="-R"
export LESSCHARSET="utf-8"
export PAGER=less
export GIT_PAGER=less

alias pip="python3 -m pip"

# chezmoi
export CHEZMOI_DIR="$XDG_DATA_HOME/chezmoi"

# starship config
export STARSHIP_CONFIG="$XDG_CONFIG_HOME/starship/starship.toml"
export STARSHIP_CACHE="$XDG_CONFIG_HOME/starship/cache"
if command -v starship>/dev/null 2>&1; then
    eval "$(starship init zsh)"
fi

# zoxide
if command -v zoxide>/dev/null 2>&1; then
    eval "$(zoxide init zsh)"
fi

# fly.io
export FLYCTL_INSTALL="$HOME/.fly"
export PATH="$FLYCTL_INSTALL/bin:$PATH"

# pnpm
export PNPM_HOME="$XDG_DATA_HOME/pnpm"
export PATH="$PNPM_HOME:$PATH"
if test -f "$XDG_CONFIG_HOME/tabtab/zsh/__tabtab.zsh"; then
    . "$XDG_CONFIG_HOME/tabtab/zsh/__tabtab.zsh"
fi

# broot
# TODO: Use zsh integration
if command -v broot>/dev/null 2>&1; then
    source "$XDG_CONFIG_HOME/broot/launcher/bash/br"
fi

# Rye
if command -v rye>/dev/null 2>&1; then
    source "$HOME/.rye/env"
fi

# Linuxbrew
if command -v zoxide>/dev/null 2>&1; then
    eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
fi

# walk
function lk {
  cd "$(walk "$@")"
}

# mise
export MISE_CONFIG_DIR="$XDG_CONFIG_HOME/mise"
export MISE_DATA_DIR="$XDG_DATA_HOME/mise"
export MISE_CACHE_DIR="$XDG_CACHE_HOME/mise"
export MISE_GLOBAL_CONFIG_FILE="$MISE_CONFIG_DIR/config.toml"
export MISE_USE_VERSIONS_HOST=true
export MISE_LEGACY_VERSION_FILE=1
export MISE_LOG_FILE="$MISE_CACHE_DIR/mise.log"
export MISE_ASDF_COMPAT=1
# If not human rights, MISE_JOBS = 1.
{{ if (eq .chezmoi.hostname "TanakaPC") -}}
export MISE_JOBS=1
{{ else -}}
export MISE_JOBS=4
{{ end -}}
#export MISE_SHORTHANDS_FILE="$MISE_CONFIG_DIR/shorthands.toml"
export MISE_YES=1
export MISE_NOT_FOUND_AUTO_INSTALL=false
export MISE_EXPERIMENTAL=1
export MISE_FISH_AUTO_ACTIVATE=1
eval "$(mise activate zsh)"
export PATH="$XDG_DATA_HOME/mise/shims:$PATH"
alias paleovim="$MISE_DATA_DIR/shims/vim"
alias pvim=paleovim

# luarocks
export PATH="$HOME/.luarocks/bin:$PATH"
export LUA_PATH="/usr/local/share/lua/5.3/?.lua;/usr/local/share/lua/5.3/?/init.lua;/usr/local/lib/lua/5.3/?.lua;/usr/local/lib/lua/5.3/?/init.lua;./?.lua;./?/init.lua;$HOME/.luarocks/share/lua/5.3/?.lua;$HOME/.luarocks/share/lua/5.3/?/init.lua"
export LUA_CPATH="/usr/local/lib/lua/5.3/?.so;/usr/local/lib/lua/5.3/loadall.so;./?.so;$HOME/.luarocks/lib/lua/5.3/?.so"

# aqua
# aqua
export AQUA_ROOT_DIR="$XDG_DATA_HOME/aqua"
export AQUA_CONFIG_DIR="$XDG_CONFIG_HOME/aqua"
export AQUA_BIN="$AQUA_ROOT_DIR/bin"

export PATH="$AQUA_BIN:$PATH"

if command -v aqua >/dev/null 2>&1; then
    export AQUA_CONFIG="$AQUA_CONFIG_DIR/aqua.yaml"
    export AQUA_GLOBAL_CONFIG="$AQUA_CONFIG"
    export AQUA_POLICY_CONFIG="$XDG_CONFIG_HOME/aqua/policy.yaml"
    # If true, Policy is disabled
    # NOTE: It's just idiot to care about security.
    export AQUA_DISABLE_POLICY=true
    {{ if (eq .chezmoi.hostname "TanakaPC") -}}
    export AQUA_MAX_PARALLELISM=1
    {{ else -}}
    export AQUA_MAX_PARALLELISM=5
    {{ end -}}
    export AQUA_PROGRESS_BAR=true
fi

# inshellisense
#if test -f ~/.inshellisense/key-bindings.zsh
#then
#    source ~/.inshellisense/key-bindings.zsh
#fi

# sheldon
export SHELDON_CONFIG_DIR="$XDG_CONFIG_HOME/sheldon/zsh"
export SHELDON_DATA_DIR="$XDG_DATA_HOME/sheldon/zsh"

if command -v sheldon>/dev/null 2>&1; then
    eval "$(sheldon source)"
fi

# PHP composer
export COMPOSER_CONFIG_HOME="$XDG_CONFIG_HOME/composer"
export COMPOSER_BIN_DIR="$COMPOSER_CONFIG_HOME/vendor/bin"

export PATH="$COMPOSER_BIN_DIR:$PATH"

# Julia
export PATH="$HOME/.juliaup/bin:$PATH"

# mocword dict
export MOCWORD_DATA="$XDG_CACHE_HOME/mocword.sqlite"

# mdbook
if command -v mdbook>/dev/null 2>&1; then
    eval "$(mdbook completions zsh)"
fi

# bob neovim version manager
export BOB_CONFIG="$XDG_CONFIG_HOME/bob/config.toml"
export PATH="$XDG_DATA_HOME/bob/nvim-bin:$PATH"
alias vim=nvim

# Neovide env-vars
## Functionality
### Frame
#export NEOVIDE_FRAME="full"
#export NEOVIDE_FRAME="none"
# macOS Only
#export NEOVIDE_FRAME="transparent"
# macOS Only
#export NEOVIDE_FRAME="buttonless"

### Maximized
# NOTE: not documented
#export NEOVIDE_MAXIMIZED=true

### Multigrid
# NOTE: not documented
#export NEOVIDE_NO_MULTIGRID=true

### Fork
#export NEOVIDE_FORK=0

### No Idle
#export NEOVIDE_IDLE=0

### Title
# macOS Only
# NOTE: not documented
#export NEOVIDE_TITLE_HIDDEN=false

### sRGB
#export NEOVIDE_SRGB=0

### Tabs
#export NEOVIDE_TABS=0

### No VSync
#export NEOVIDE_VSYNC=0

### Neovim Binary
#export NEOVIM_BIN="/path/to/nvim"

### Wayland / X11
# Linux Only
# NOTE: Incomprehensible
#export NEOVIDE_APP_ID="wayland_app_id"
#export NEOVIDE_WM_CLASS_INSTANCE="x11_wm_class_instance"
#export NEOVIDE_WM_CLASS="x11_wm_class"

# zeno.zsh
export ZENO_HOME="$XDG_CONFIG_HOME/zeno"

# if disable deno cache command when plugin loaded
#export ZENO_DISABLE_EXECUTE_CACHE_COMMAND=1

# if enable fzf-tmux
#export ZENO_ENABLE_FZF_TMUX=1

# if setting fzf-tmux options
#export ZENO_FZF_TMUX_OPTIONS="-p"

# Experimental: Use UNIX Domain Socket
#export ZENO_ENABLE_SOCK=1

# if disable builtin completion
#export ZENO_DISABLE_BUILTIN_COMPLETION=1

# default
export ZENO_GIT_CAT="bat --color=always"

# default
export ZENO_GIT_TREE="eza --tree"

if [[ -n $ZENO_LOADED ]]; then
  bindkey ' '  zeno-auto-snippet

  # fallback if snippet not matched (default: self-insert)
  #export ZENO_AUTO_SNIPPET_FALLBACK=self-insert

  # if you use zsh's incremental search
  #bindkey -M isearch ' ' self-insert

  bindkey '^m' zeno-auto-snippet-and-accept-line

  bindkey '^i' zeno-completion

  bindkey '^x '  zeno-insert-space
  bindkey '^x^m' accept-line
  bindkey '^x^z' zeno-toggle-auto-snippet

  # fallback if completion not matched
  # (default: fzf-completion if exists; otherwise expand-or-complete)
  #export ZENO_COMPLETION_FALLBACK=expand-or-complete
fi

export ZSH_CACHE_DIR="$XDG_CACHE_HOME/zsh"

# delete duplicate path
typeset -U PATH
