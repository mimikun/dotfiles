# Global
export LANG=en_US.UTF-8
export GHQ_ROOT="$HOME/ghq"
export PIPENV_VENV_IN_PROJECT=1
export TODAY=(date +'%Y/%m/%d')

# XDG Base Directory
export XDG_CONFIG_HOME="$HOME/.config"
export XDG_CACHE_HOME="$HOME/.cache"
export XDG_DATA_HOME="$HOME/.local/share"
export XDG_STATE_HOME="$HOME/.local/state"

#export USE_SHELL_PROMPT="oh-my-posh"
# TODO: it
#export USE_SHELL_PROMPT="pure"
# TODO: it
#export USE_SHELL_PROMPT="spaceship"
# NOTE: temporary
#export USE_SHELL_PROMPT="starship"
#export USE_NVIM_VERSION_MANAGER="nvs"
export USE_NVIM_VERSION_MANAGER="bob"

{{ if (eq .chezmoi.hostname "azusa") -}}
export GTK_IM_MODULE="fcitx"
export QT_IM_MODULE="fcitx"
export XMODIFIERS="@im=fcitx"
# CapsLock to Ctrl
setxkbmap -option ctrl:nocaps
{{ end -}}

# env-vars
# GITHUB_USERNAME
{{ if eq .chezmoi.hostname "TanakaPC" -}}
export GITHUB_USERNAME="{{ (rbwFields "dotfiles-chezmoi").github_username.value }}"
{{ else -}}
export GITHUB_USERNAME="mimikun"
{{ end -}}

# WIN_HOME
{{ if eq .chezmoi.hostname "Wakamo" -}}
export WIN_HOME="/mnt/c/Users/mimikun"
{{ else if eq .chezmoi.hostname "TanakaPC" -}}
export WIN_HOME="/mnt/c/Users/{{ (rbwFields "dotfiles-chezmoi").windows_user_name.value }}"
{{ end -}}

# OBSIDIAN_VAULT_ROOT
{{ if eq .chezmoi.hostname "azusa" -}}
export OBSIDIAN_VAULT_ROOT="Obsidian/mimikun"
{{ else if eq .chezmoi.hostname "Wakamo" -}}
export OBSIDIAN_VAULT_ROOT="Obsidian/mimikun"
{{ else -}}
export OBSIDIAN_VAULT_ROOT="{{ (rbwFields "dotfiles-chezmoi").obsidian_vault_root_path.value }}"
{{ end -}}

# LG_CONFIG_FILE
{{ if eq .chezmoi.hostname "azusa" -}}
export LG_CONFIG_FILE="$XDG_CONFIG_HOME/lazygit/linux_config.yml"
{{ else -}}
export LG_CONFIG_FILE="$XDG_CONFIG_HOME/lazygit/wsl_config.yml"
{{ end -}}

export WORKSPACE="$GHQ_ROOT/github.com/$GITHUB_USERNAME"
export WORKSPACE_MIMIKUN="$GHQ_ROOT/github.com/mimikun"
export NVIM_DEV_PLUGINS="$WORKSPACE_MIMIKUN/dev-plugins"

{{ if (ne .chezmoi.hostname "azusa") -}}
export windl="$WIN_HOME/Downloads"
export WIN_DESKTOP="$WIN_HOME/Desktop"
export WIN_DOCUMENTS="$WIN_HOME/Documents"
export obsidian_vault_root_path="$WIN_DOCUMENTS/$OBSIDIAN_VAULT_ROOT"
export DISPLAY=":0"
{{ else -}}
export obsidian_vault_root_path="$HOME/Documents/$OBSIDIAN_VAULT_ROOT"
{{ end -}}

export obsidian_vault_path="$obsidian_vault_root_path"
export obsidian_dailynote_path="$obsidian_vault_path/001_DailyNotes"
export obsidian="$obsidian_dailynote_path"

alias mkdir="mkdir -p"
alias rm="rm -i"

# ls alias
alias ls="eza"
alias l1="ls -1"
alias lt="ls --tree"
alias ll="ls -l"
alias la="ls -la"
alias lat="ls -l -a --tree"
alias lta="ls --tree -a"

export PATH="/usr/bin:$PATH"
export PATH="/usr/local/bin:$PATH"
export PATH="/usr/local/sbin:$PATH"
export PATH="$HOME/go/bin:$PATH"
export PATH="$HOME/.cargo/bin:$PATH"

export DENO_INSTALL="$HOME/.deno"
export PATH="$DENO_INSTALL/bin:$PATH"

#Ubuntu
export PATH="/bin:$PATH"
export PATH="/usr/games:$PATH"
export PATH="/usr/sbin:$PATH"
export PATH="/usr/local/games:$PATH"
export PATH="/sbin:$PATH"
export PATH="/snap/bin:$PATH"
export PATH="$HOME/.fzf/bin:$PATH"
export PATH="$HOME/.local/bin/:$PATH"
export PATH="$HOME/.npm-global/bin:$PATH"
export PATH="$HOME/.dotnet/tools/:$PATH"
export PATH="$HOME/.gem/ruby/2.7.0/bin/:$PATH"
export PATH="$HOME/depot_tools:$PATH"
export EDITOR=nvim
export LESS="-R"
export LESSCHARSET="utf-8"
export PAGER=less
export GIT_PAGER=less

alias pip="python3 -m pip"

# chezmoi
export CHEZMOI_DIR="$XDG_DATA_HOME/chezmoi"

# starship config
export STARSHIP_CONFIG_DIR="$XDG_CONFIG_HOME/starship"
export STARSHIP_CONFIG="$STARSHIP_CONFIG_DIR/starship.toml"
export STARSHIP_CACHE="$XDG_CACHE_HOME/starship"

# spaceship config
export SPACESHIP_PLUGIN_PATH="$HOME/.zsh/spaceship/spaceship.zsh"
export SPACESHIP_CONFIG_DIR="$XDG_CONFIG_HOME/spaceship"
export SPACESHIP_CONFIG="$SPACESHIP_CONFIG_DIR/spaceship.zsh"

# pure config
export PURE_PATH="$HOME/.zsh/pure"

# NOTE: shell prompt
# starship
if command -v starship >/dev/null 2>&1; then
    if [["$USE_SHELL_PROMPT" == "starship"]]; then
        eval "$(starship init zsh)"
    fi
fi

# oh-my-posh
if command -v oh-my-posh >/dev/null 2>&1; then
    if [["$USE_SHELL_PROMPT" == "oh-my-posh"]]; then
    eval "$(oh-my-posh init zsh --config 'https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/refs/heads/main/themes/tokyonight_storm.omp.json')"
    fi
fi

# spaceship
if command -v spaceship >/dev/null 2>&1; then
    if [[ "$USE_SHELL_PROMPT" == "spaceship" ]]; then
        source "$SPACESHIP_PLUGIN_PATH"
    fi
fi

# pure
if [[ "$USE_SHELL_PROMPT" == "pure" ]]; then
    fpath+=($HOME/.zsh/pure)
    autoload -U promptinit; promptinit
    # pure config begin

    PURE_CMD_MAX_EXEC_TIME=5
    PURE_GIT_PULL=1
    PURE_GIT_UNTRACKED_DIRTY=1
    PURE_GIT_DELAY_DIRTY_CHECK=1800 # 30 min
    PURE_PROMPT_SYMBOL="❯"
    PURE_PROMPT_VICMD_SYMBOL="❮"
    PURE_GIT_DOWN_ARROW="⇣"
    PURE_GIT_UP_ARROW="⇡"
    PURE_GIT_STASH_SYMBOL="≡"

    # show git-stash status
    zstyle :prompt:pure:git:stash show yes

    # if use nix-shell
    zstyle :prompt:pure:environment:nix-shell show no

    # pure config end
    prompt pure
fi

# zoxide
if command -v zoxide>/dev/null 2>&1; then
    eval "$(zoxide init zsh)"
fi

# fly.io
export FLYCTL_INSTALL="$HOME/.fly"
export PATH="$FLYCTL_INSTALL/bin:$PATH"

# pnpm
export PNPM_HOME="$XDG_DATA_HOME/pnpm"
export PATH="$PNPM_HOME:$PATH"
if command -v pnpm>/dev/null 2>&1; then
    eval "$(pnpm completion zsh)"
fi

# broot
# TODO: Use zsh integration
if command -v broot>/dev/null 2>&1; then
    source "$XDG_CONFIG_HOME/broot/launcher/bash/br"
fi

# Rye
if command -v rye>/dev/null 2>&1; then
    source "$HOME/.rye/env"
fi

# Linuxbrew
if command -v brew>/dev/null 2>&1; then
    eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
fi

# walk
function lk {
  cd "$(walk "$@")"
}

# mise
eval "$(mise activate zsh)"
alias paleovim="$XDG_DATA_HOME/mise/installs/vim/ref-master/bin/vim"
alias pvim=paleovim

# luarocks
export PATH="$HOME/.luarocks/bin:$PATH"
export LUA_PATH="/usr/local/share/lua/5.3/?.lua;/usr/local/share/lua/5.3/?/init.lua;/usr/local/lib/lua/5.3/?.lua;/usr/local/lib/lua/5.3/?/init.lua;./?.lua;./?/init.lua;$HOME/.luarocks/share/lua/5.3/?.lua;$HOME/.luarocks/share/lua/5.3/?/init.lua"
export LUA_CPATH="/usr/local/lib/lua/5.3/?.so;/usr/local/lib/lua/5.3/loadall.so;./?.so;$HOME/.luarocks/lib/lua/5.3/?.so"

# aqua
export AQUA_ROOT_DIR="$XDG_DATA_HOME/aqua"
export AQUA_CONFIG_DIR="$XDG_CONFIG_HOME/aqua"
export AQUA_BIN="$AQUA_ROOT_DIR/bin"

export PATH="$AQUA_BIN:$PATH"

if command -v aqua >/dev/null 2>&1; then
    export AQUA_CONFIG="$AQUA_CONFIG_DIR/aqua.yaml"
    export AQUA_GLOBAL_CONFIG="$AQUA_CONFIG"
    export AQUA_POLICY_CONFIG="$XDG_CONFIG_HOME/aqua/policy.yaml"
    # If true, Policy is disabled
    # NOTE: It's just idiot to care about security.
    export AQUA_DISABLE_POLICY=true
    {{ if (eq .chezmoi.hostname "TanakaPC") -}}
    export AQUA_MAX_PARALLELISM=1
    {{ else if (eq .chezmoi.hostname "Wakamo") -}}
    export AQUA_MAX_PARALLELISM=3
    {{ else -}}
    export AQUA_MAX_PARALLELISM=5
    {{ end -}}
    export AQUA_PROGRESS_BAR=true
fi

# inshellisense
#if test -f ~/.inshellisense/key-bindings.zsh
#then
#    source ~/.inshellisense/key-bindings.zsh
#fi

# sheldon
export SHELDON_CONFIG_DIR="$XDG_CONFIG_HOME/sheldon/zsh"
export SHELDON_DATA_DIR="$XDG_DATA_HOME/sheldon/zsh"

if command -v sheldon>/dev/null 2>&1; then
    eval "$(sheldon source)"
fi

# PHP composer
export COMPOSER_CONFIG_HOME="$XDG_CONFIG_HOME/composer"
export COMPOSER_BIN_DIR="$COMPOSER_CONFIG_HOME/vendor/bin"

export PATH="$COMPOSER_BIN_DIR:$PATH"

# Julia
export PATH="$HOME/.juliaup/bin:$PATH"

# mocword dict
export MOCWORD_DATA="$XDG_CACHE_HOME/mocword.sqlite"

# mdbook
if command -v mdbook>/dev/null 2>&1; then
    eval "$(mdbook completions zsh)"
fi

# neovim version manager

# bob-nvim
export BOB_CONFIG="$XDG_CONFIG_HOME/bob/config.toml"
export BOB_BIN_DIR="$XDG_DATA_HOME/bob/nvim-bin"

# nvs
export NVS_BIN_DIR="$XDG_DATA_HOME/nvs/bin"

if [[ "$USE_NVIM_VERSION_MANAGER" == "bob" ]]; then
    export PATH="$BOB_BIN_DIR:$PATH"
fi

if [[ "$USE_NVIM_VERSION_MANAGER" == "nvs" ]]; then
    export PATH="$NVS_BIN_DIR:$PATH"
fi

alias vim=nvim

# NOTE: Enable if has human rights
{{ if (ne .chezmoi.hostname "TanakaPC") -}}
# atuin
if command -v atuin>/dev/null 2>&1; then
    eval "$(atuin init zsh)"
    atuin gen-completions --shell zsh
fi
{{ end -}}

# rebar3
if command -v rebar3 >/dev/null 2>&1; then
    export PATH="$XDG_CACHE_HOME/rebar3/bin:$PATH"
fi

# age public keys
export AGE_PUBKEY_HOME="age1cktdwc8u4z76kawluyswaruyeg7eg6078rw3t0kkmx5wqkk40d2qzajn8y"
export AGE_PUBKEY_WORK="age1n03v0casqk2djs2jw3xq5ldpdjtp2s6r0u3uhtmd7zv9j2xuyf6qpl9x7l"
# TODO: config
export AGE_PUBKEY_AZUSA=""
{{ if (eq .chezmoi.hostname "TanakaPC") -}}
export AGE_PUBKEY="$AGE_PUBKEY_HOME"
{{ else -}}
export AGE_PUBKEY="$AGE_PUBKEY_WORK"
{{ end -}}

# golang
export GOPATH="$HOME/go"
export GOBIN="$GOPATH/bin"
export PATH="$GOBIN:$PATH"

# Neovide env-vars
## Functionality
### Frame
#export NEOVIDE_FRAME="full"
#export NEOVIDE_FRAME="none"
# macOS Only
#export NEOVIDE_FRAME="transparent"
# macOS Only
#export NEOVIDE_FRAME="buttonless"

### Maximized
# NOTE: not documented
#export NEOVIDE_MAXIMIZED=true

### Multigrid
# NOTE: not documented
#export NEOVIDE_NO_MULTIGRID=true

### Fork
#export NEOVIDE_FORK=0

### No Idle
#export NEOVIDE_IDLE=0

### Title
# macOS Only
# NOTE: not documented
#export NEOVIDE_TITLE_HIDDEN=false

### sRGB
#export NEOVIDE_SRGB=0

### Tabs
#export NEOVIDE_TABS=0

### No VSync
#export NEOVIDE_VSYNC=0

### Neovim Binary
#export NEOVIM_BIN="/path/to/nvim"

### Wayland / X11
# Linux Only
# NOTE: Incomprehensible
#export NEOVIDE_APP_ID="wayland_app_id"
#export NEOVIDE_WM_CLASS_INSTANCE="x11_wm_class_instance"
#export NEOVIDE_WM_CLASS="x11_wm_class"

# nimble
export PATH="$HOME/.nimble/bin:$PATH"

# pay-respects
eval "$(pay-respects zsh --alias)"

# TODO: fix it
# jujutsu
#jj util completion zsh

# TODO: fix it
# sunbeam
#sunbeam completion zsh

# zettelkasten
export zettelkasten_root="$GHQ_ROOT/codeberg.org/mimikun/zettelkasten"

# vfox
# NOTE: can't use it now
#eval "$(vfox activate zsh)"

# srgn
if command -v srgn >/dev/null 2>&1; then
    eval "$(srgn --completions zsh)"
fi

# go-task
if command -v task >/dev/null 2>&1; then
    eval "$(task --completion zsh)"
fi

# Claude Desktop
export CLAUDE_DESKTOP_PATH="$WIN_HOME/AppData/Roaming/Claude.json"
export CLAUDE_DESKTOP_CONFIG="$CLAUDE_DESKTOP_PATH/claude_desktop_config.json"

# pixi
if command -v pixi >/dev/null 2>&1; then
    eval "$(pixi completion --shell zsh)"
fi

export ZSH_CACHE_DIR="$XDG_CACHE_HOME/zsh"

#[ ! -f "$HOME/.x-cmd.root/X" ] || . "$HOME/.x-cmd.root/X" # boot up x-cmd.

# delete duplicate path
typeset -U PATH

# vim:ft=zsh.chezmoitmpl
