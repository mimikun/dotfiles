$majorVer = $PSVersionTable.PSVersion.Major

# Windows PowerShell (v5)
$isPowerShell = ($majorVer -eq 5)
$env:V5_CACHE_PROFILE_DIR = Join-Path -Path $env:LOCALAPPDATA -ChildPath "Microsoft\Windows\PowerShell"
$env:V5_CACHE_PROFILE = Join-Path -Path $env:V5_CACHE_PROFILE_DIR -ChildPath "cache-profile-v5.ps1"
$V5_CACHE_PROFILE = $env:V5_CACHE_PROFILE

# PowerShell (v7)
$isPwsh = ($majorVer -eq 7)
$env:V7_CACHE_PROFILE_DIR = Join-Path -Path $env:LOCALAPPDATA -ChildPath "Microsoft\PowerShell"
$env:V7_CACHE_PROFILE = Join-Path -Path $env:V7_CACHE_PROFILE_DIR -ChildPath "cache-profile-v7.ps1"
$V7_CACHE_PROFILE = $env:V7_CACHE_PROFILE

# Use cache and speedup
# thx: https://zenn.dev/ryoppippi/articles/de6c931cc1028f
if ($isPwsh) {
    # PowerShell v7
    $env:CACHE_PROFILE_DIR = $env:V7_CACHE_PROFILE_DIR
    $env:CACHE_PROFILE = $env:V7_CACHE_PROFILE
}
if ($isPowerShell) {
    # Windows PowerShell v5
    $env:CACHE_PROFILE_DIR = $env:V5_CACHE_PROFILE_DIR
    $env:CACHE_PROFILE = $env:V5_CACHE_PROFILE
}

$CACHE_PROFILE = $env:CACHE_PROFILE

if ((Test-Path $PROFILE) -and (Test-Path $CACHE_PROFILE)) {
    if ((Get-Item $PROFILE).LastWriteTime -gt (Get-Item $CACHE_PROFILE).LastWriteTime) {
        $cond = $true
    } else {
        $cond = $false
    }
} elseif ((Test-Path $PROFILE) -and !(Test-Path $CACHE_PROFILE)) {
    $cond = $true
} else {
    $cond = $false
}

if ($cond) {
    New-Item $env:CACHE_PROFILE_DIR -ItemType Directory -Force 2>&1 > $null
    New-Item $env:CACHE_PROFILE -ItemType File -Value "" -Force 2>&1 > $null

    # using namespace first
    $namespace1 = "using namespace System.Management.Automation.Language"
    $namespace2 = "using namespace System.Management.Automation"
    Write-Output $namespace1 >> $env:CACHE_PROFILE
    Write-Output $namespace2 >> $env:CACHE_PROFILE

    # starship setup
    Write-Output "# cache starship setup" >> $env:CACHE_PROFILE
    starship init powershell --print-full-init >> $env:CACHE_PROFILE

    # starship completion
    Write-Output "# cache starship completion" >> $env:CACHE_PROFILE
    $starship_completion = starship completions powershell |
        ForEach-Object { $_ -replace $namespace1, "" } |
        ForEach-Object { $_ -replace $namespace2, "" }
    Write-Output $starship_completion >> $env:CACHE_PROFILE

    # wezterm completion
    Write-Output "# cache wezterm completion" >> $env:CACHE_PROFILE
    $wezterm_completion = wezterm shell-completion --shell power-shell |
        ForEach-Object { $_ -replace $namespace1, "" } |
        ForEach-Object { $_ -replace $namespace2, "" }
    Write-Output $wezterm_completion >> $env:CACHE_PROFILE

    # rustup completion
    Write-Output "# cache rustup completion" >> $env:CACHE_PROFILE
    $rustup_completion = rustup completions powershell |
        ForEach-Object { $_ -replace $namespace1, "" } |
        ForEach-Object { $_ -replace $namespace2, "" }
    Write-Output $rustup_completion >> $env:CACHE_PROFILE

    # chezmoi completion
    Write-Output "# cache chezmoi completion" >> $env:CACHE_PROFILE
    chezmoi completion powershell >> $env:CACHE_PROFILE

    # github-cli completion
    Write-Output "# cache github-cli completion" >> $env:CACHE_PROFILE
    gh completion -s powershell >> $env:CACHE_PROFILE

    # just completion
    # Powershell v7以上のときのみ読み込む
    if ($isPwsh) {
        Write-Output "# cache just completion" >> $env:CACHE_PROFILE
        $just_completion = just --completions powershell |
            ForEach-Object { $_ -replace $namespace1, "" } |
            ForEach-Object { $_ -replace $namespace2, "" }
        Write-Output $just_completion >> $env:CACHE_PROFILE
    }

    # zoxide setup
    Write-Output "# cache zoxide setup" >> $env:CACHE_PROFILE
    zoxide init powershell >> $env:CACHE_PROFILE

    # zoxide completion
    Write-Output "# cache zoxide completion" >> $env:CACHE_PROFILE
    $zoxideCompleteFilePath = Join-Path -Path $env:GHQ_ROOT -ChildPath "github.com\ajeetdsouza\zoxide\contrib\completions\_zoxide.ps1"
    if (Test-Path($zoxideCompleteFilePath)) {
        $zoxide_completion = Get-Content $zoxideCompleteFilePath |
        ForEach-Object { $_ -replace $namespace1, "" } |
        ForEach-Object { $_ -replace $namespace2, "" }
    }
    Write-Output $zoxide_completion >> $env:CACHE_PROFILE

    # ripgrep completion
    Write-Output "# cache ripgrep completion" >> $env:CACHE_PROFILE
    $ripgrep_completion = rg --generate complete-powershell |
        ForEach-Object { $_ -replace $namespace1, "" } |
        ForEach-Object { $_ -replace $namespace2, "" }
    Write-Output $ripgrep_completion >> $env:CACHE_PROFILE
}

# Loading from cache profile
. $env:CACHE_PROFILE

# gsudo
Import-Module gsudoModule
#posh-git git
Import-Module posh-git
# scoop completion
$scoopCompletionPath = Join-Path $env:USERPROFILE -ChildPath "scoop\modules\scoop-completion"
Import-Module $scoopCompletionPath
# PSReadLine
# settings
Import-Module PSReadLine

$env:EDITOR = "nvim"
$env:NeovimConfig = Join-Path $env:USERPROFILE -ChildPath "AppData\Local\nvim"
$env:VimConfig = Join-Path $env:USERPROFILE -ChildPath "vimfiles"
$env:CHEZMOI_DIR = Join-Path $env:USERPROFILE -ChildPath ".local\share\chezmoi"
$env:WIN_HOME = $env:USERPROFILE
$env:windl = Join-Path $env:USERPROFILE -ChildPath "Downloads"

# Obsidian vault
{{ if eq .chezmoi.hostname "TanakaPC" }}
$win_obsidian_vault_path_value = {{ (bitwardenFields "item" "0f17c992-d0fe-4f36-bde8-95d9e2de3a6d").win_obsidian_vault_path.value }}
{{ else }}
$win_obsidian_vault_path_value = {{ (bitwardenFields "item" "ec557677-82d9-4a61-a4f6-aed300cfb34f").win_obsidian_vault_path.value }}
{{ end }}
$windocuments = Join-Path $env:USERPROFILE -ChildPath "Documents"
$env:obsidian_vault_path = Join-Path $windocuments -ChildPath $win_obsidian_vault_path_value
$env:obsidian = Join-Path $env:obsidian_vault_path -ChildPath "001_DailyNotes"

# alias bd
function Set-ParentLocation() {
    Set-Location ..
}
Set-Alias -Name bd -Value Set-ParentLocation

# alias touch
Set-Alias -Name touch -Value New-Item

# alias ls (lsd or eza)
Get-Command eza -ErrorAction Ignore | Out-Null
$res = $?
if ($res) {
    # alias ls eza
    Remove-Item -Path Alias:ls
    Set-Alias -Name ls -Value eza
    # eza aliases
    function Invoke-EzaTree() {
        eza -T
    }
    Set-Alias -Name lt -Value Invoke-EzaTree
    function Invoke-EzaLa() {
        eza -la
    }
    Set-Alias -Name la -Value Invoke-EzaLa
}

# alias vim
Get-Command neovim -ErrorAction Ignore | Out-Null
$res = $?
if ($res) {
    # alias vim neovim
    Set-Alias -Name vim -Value neovim
}

# alias gcd
$env:PSGhqPath = "$env:GHQ_ROOT\github.com\mimikun\PSGhq\Set-GhqLocation.ps1"
if (Test-Path($env:PSGhqPath)) {
    . $env:PSGhqPath
    Set-Alias -Name gcd -Value Set-GhqLocation
}

# alias update_cargo_package
$env:UpdateCargoPackagePath = "$env:GHQ_ROOT\github.com\mimikun\update_cargo_packages\Invoke-UpdateCargoPackage.ps1"
if (Test-Path($env:UpdateCargoPackagePath)) {
    . $env:UpdateCargoPackagePath
    Set-Alias -Name update_cargo_package -Value Invoke-UpdateCargoPackage
}

# alias vup
$env:VupPath = "$env:GHQ_ROOT\github.com\mimikun\vup\Invoke-Vup.ps1"
if (Test-Path($env:VupPath)) {
    . $env:VupPath
    Set-Alias -Name vup -Value Invoke-Vup
}

# pueued auto start
Get-Process pueued -ErrorAction Ignore | Out-Null
$res = $?
if (!$res) {
    pueued -d
}

# alias wsl_restart Invoke-WslTerminateUbuntu
function Invoke-WslTerminateUbuntu() {
    if ($env:COMPUTERNAME -eq "TANAKAPC") {
        wsl --terminate Ubuntu-20.04
    } else {
        wsl --terminate Ubuntu
    }
}
Set-Alias -Name wsl_restart Invoke-WslTerminateUbuntu

# alias editorconfig Invoke-GenerateEditorConfig
function Invoke-GenerateEditorConfig() {
    Get-Item -Path .\.editorconfig -ErrorAction Ignore
    $res = $?
    if (!$res) {
        Write-Output ".editorconfig not exist."
        Write-Output "Creating .editorconfig."
        Copy-Item -Path $env:USERPROFILE\.editorconfig-template -Destination .\.editorconfig
    }
}
Set-Alias -Name editorconfig Invoke-GenerateEditorConfig

# PSReadLine settings
Set-PSReadLineKeyHandler `
    -Key Ctrl+g `
    -BriefDescription "Run ghq cd" `
    -LongDescription "Run ghq cd" `
    -ScriptBlock {
        Set-GhqLocation
    }

# inshellisense
$v7inshellisensePath = Join-Path $env:USERPROFILE -ChildPath ".inshellisense/key-bindings-pwsh.ps1"
$v5inshellisensePath = Join-Path $env:USERPROFILE -ChildPath ".inshellisense/key-bindings-powershell.ps1"

if ($isPwsh) {
    if (Test-Path $v7inshellisensePath -PathType Leaf) {
        . $v7inshellisensePath
    }
}

if ($isPowerShell) {
    if (Test-Path $v5inshellisensePath -PathType Leaf) {
        . $v5inshellisensePath
    }
}
