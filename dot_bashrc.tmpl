# TODO: reconf all

if [ -f ~/.local/share/blesh/ble.sh ]; then
    source ~/.local/share/blesh/ble.sh --attach=none
else
    # エラーメッセージを表示したい場合（オプション）
    echo "Note: ble.sh not found. Please install ble.sh"
    echo "https://github.com/akinomyoga/ble.sh"
fi

# All platform 共通
export EDITOR=nvim
export LESS="-R"
export LESSCHARSET="utf-8"
export PAGER=less
export GIT_PAGER=less
export LANG=en_US.UTF-8
export LC_ALL=en_US.UTF-8

export USE_SHELL_PROMPT="oh-my-posh"
#export USE_SHELL_PROMPT="starship"
#export USE_NVIM_VERSION_MANAGER="nvs"
export USE_NVIM_VERSION_MANAGER="bob"

# XDG Base Directory
export XDG_CONFIG_HOME="$HOME/.config"
export XDG_CACHE_HOME="$HOME/.cache"
export XDG_DATA_HOME="$HOME/.local/share"
export XDG_STATE_HOME="$HOME/.local/state"

{{ if (eq .chezmoi.hostname "azusa") -}}
export GTK_IM_MODULE="fcitx"
export QT_IM_MODULE="fcitx"
export XMODIFIERS="@im=fcitx"
# CapsLock to Ctrl
setxkbmap -option ctrl:nocaps
{{ end -}}

{{ if eq .chezmoi.os "linux" -}}
# Linuxのとき
case $- in
    *i*) ;;
      *) return;;
esac

HISTCONTROL=ignoreboth
shopt -s histappend
HISTSIZE=1000
HISTFILESIZE=2000
shopt -s checkwinsize
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

# chezmoi
export CHEZMOI_DIR="$XDG_DATA_HOME/chezmoi"

# 仕事PC
{{ if eq .chezmoi.hostname "TanakaPC" -}}
# dockerd chec
# Start Docker daemon automatically when logging in if not running.
RUNNING=$(pgrep -f dockerd)
if [ -z "$RUNNING" ]; then
    sudo dockerd > /dev/null 2>&1 &
    disown
fi
{{ end -}}

# 仕事PC
{{ if eq .chezmoi.hostname "TanakaPC" -}}
{{ if eq .chezmoi.os "windows" -}}
# GITHUB_USERNAME
export GITHUB_USERNAME="{{ (bitwardenFields "item" "0f17c992-d0fe-4f36-bde8-95d9e2de3a6d").github_username.value }}"
# WIN_HOME
export WIN_HOME = $env:USERPROFILE
# OBSIDIAN_VAULT_ROOT
export OBSIDIAN_VAULT_ROOT="{{ (bitwardenFields "item" "0f17c992-d0fe-4f36-bde8-95d9e2de3a6d").obsidian_vault_root_path.value }}"
{{ else if eq .chezmoi.os "linux" -}}
# GITHUB_USERNAME
export GITHUB_USERNAME="{{ (rbwFields "dotfiles-chezmoi").github_username.value }}"
# WIN_HOME
export WIN_HOME="/mnt/c/Users/{{ (rbwFields "dotfiles-chezmoi").windows_user_name.value }}"
# OBSIDIAN_VAULT_ROOT
export OBSIDIAN_VAULT_ROOT="{{ (rbwFields "dotfiles-chezmoi").obsidian_vault_root_path.value }}"
{{ end -}}
# 非仕事PC
{{ else -}}
# GITHUB_USERNAME
export GITHUB_USERNAME="mimikun"
{{ if eq .chezmoi.os "windows" -}}
# WIN_HOME
export WIN_HOME = $env:USERPROFILE
# OBSIDIAN_VAULT_ROOT
export OBSIDIAN_VAULT_ROOT="{{ (bitwardenFields "item" "ec557677-82d9-4a61-a4f6-aed300cfb34f").obsidian_vault_root_path.value }}"
{{ else if eq .chezmoi.os "linux" -}}
# WIN_HOME
{{ if eq .chezmoi.hostname "Wakamo" -}}
export WIN_HOME="/mnt/c/Users/mimikun"
{{ else if eq .chezmoi.hostname "azusa" -}}
export WIN_HOME=""
{{ else -}}
export WIN_HOME="/mnt/c/Users/{{ (rbwFields "dotfiles-chezmoi").windows_user_name.value }}"
{{ end -}}
# OBSIDIAN_VAULT_ROOT
export OBSIDIAN_VAULT_ROOT="Obsidian/mimikun"
{{ else -}}
{{ end -}}
{{ end -}}

# LG_CONFIG_FILE
{{ if eq .chezmoi.hostname "azusa" -}}
export LG_CONFIG_FILE="$XDG_CONFIG_HOME/lazygit/linux_config.yml"
{{ else -}}
export LG_CONFIG_FILE="$XDG_CONFIG_HOME/lazygit/wsl_config.yml"
{{ end -}}

export WORKSPACE="$GHQ_ROOT/github.com/$GITHUB_USERNAME"
export WORKSPACE_MIMIKUN="$GHQ_ROOT/github.com/mimikun"
export NVIM_DEV_PLUGINS="$WORKSPACE_MIMIKUN/dev-plugins"

{{ if eq .chezmoi.hostname "azusa" -}}
export obsidian_vault_root_path="$HOME/Documents/$OBSIDIAN_VAULT_ROOT"
{{ else -}}
export windl="$WIN_HOME/Downloads"
export WIN_DESKTOP="$WIN_HOME/Desktop"
export WIN_DOCUMENTS="$WIN_HOME/Documents"
export obsidian_vault_root_path="$WIN_DOCUMENTS/$OBSIDIAN_VAULT_ROOT"
export DISPLAY=":0"
{{ end -}}

export obsidian_vault_path=$obsidian_vault_root_path
export obsidian_dailynote_path=$obsidian_vault_path/001_DailyNotes
export obsidian=$obsidian_dailynote_path

# zoxide
if command -v zoxide >/dev/null 2>&1; then
    eval "$(zoxide init bash)"
fi

# starship
export STARSHIP_CONFIG_DIR="$XDG_CONFIG_HOME/starship"
export STARSHIP_CONFIG="$STARSHIP_CONFIG_DIR/starship.toml"
export STARSHIP_CACHE="$XDG_CACHE_HOME/starship"

# NOTE: shell prompt
# starship
if command -v starship >/dev/null 2>&1; then
    if [[ "$USE_SHELL_PROMPT" == "starship" ]]; then
        eval "$(starship init bash)"
    fi
fi

# oh-my-posh
if command -v oh-my-posh >/dev/null 2>&1; then
    if [[ "$USE_SHELL_PROMPT" == "oh-my-posh" ]]; then
        eval "$(oh-my-posh init bash --config 'https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/refs/heads/main/themes/tokyonight_storm.omp.json')"
    fi
fi

# fly.io
export FLYCTL_INSTALL="$HOME/.fly"
export PATH="$FLYCTL_INSTALL/bin:$PATH"

# pnpm
export PNPM_HOME="$XDG_DATA_HOME/pnpm"
export PATH="$PNPM_HOME:$PATH"
if command -v pnpm >/dev/null 2>&1; then
    eval "$(pnpm completion bash)"
fi

# broot
if command -v broot >/dev/null 2>&1; then
    export BROOT_FILE="$XDG_CONFIG_HOME/broot/launcher/bash/br"
    if [ -f "$BROOT_FILE" ]; then
        source "$BROOT_FILE"
    fi
fi

# Rye
if command -v rye >/dev/null 2>&1; then
    export RYE_FILE="$HOME/.rye/env"
    if [ -f "$RYE_FILE" ]; then
        source "$RYE_FILE"
    fi
fi

# Linuxbrew
if command -v brew >/dev/null 2>&1; then
    export BREW_FILE="/home/linuxbrew/.linuxbrew/bin/brew"
    if [ -f "$BREW_FILE" ]; then
        eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
    fi
fi

# walk
function lk {
    cd "$(walk "$@")"
}

# mise
eval "$(mise activate bash)"
alias paleovim="$XDG_DATA_HOME/mise/installs/vim/ref-master/bin/vim"
alias pvim=paleovim

# luarocks
export PATH="$HOME/.luarocks/bin:$PATH"
export LUA_PATH="/usr/local/share/lua/5.3/?.lua;/usr/local/share/lua/5.3/?/init.lua;/usr/local/lib/lua/5.3/?.lua;/usr/local/lib/lua/5.3/?/init.lua;./?.lua;./?/init.lua;$HOME/.luarocks/share/lua/5.3/?.lua;$HOME/.luarocks/share/lua/5.3/?/init.lua"
export LUA_CPATH="/usr/local/lib/lua/5.3/?.so;/usr/local/lib/lua/5.3/loadall.so;./?.so;$HOME/.luarocks/lib/lua/5.3/?.so"

# aqua
export AQUA_ROOT_DIR="$XDG_DATA_HOME/aqua"
export AQUA_CONFIG_DIR="$XDG_CONFIG_HOME/aqua"
export AQUA_BIN="$AQUA_ROOT_DIR/bin"

export PATH="$AQUA_BIN:$PATH"

if command -v aqua >/dev/null 2>&1; then
    export AQUA_CONFIG="$AQUA_CONFIG_DIR/aqua.yaml"
    export AQUA_GLOBAL_CONFIG="$AQUA_CONFIG"
    export AQUA_POLICY_CONFIG="$XDG_CONFIG_HOME/aqua/policy.yaml"
    # If true, Policy is disabled
    # NOTE: It's just idiot to care about security.
    export AQUA_DISABLE_POLICY=true
    {{ if eq .chezmoi.hostname "TanakaPC" -}}
    export AQUA_MAX_PARALLELISM=1
    {{ else if eq .chezmoi.hostname "Wakamo" -}}
    export AQUA_MAX_PARALLELISM=3
    {{ else -}}
    export AQUA_MAX_PARALLELISM=5
    {{ end -}}
    export AQUA_PROGRESS_BAR=true
fi

# inshellisense
#if test -f ~/.inshellisense/key-bindings.bash
#then
#    source ~/.inshellisense/key-bindings.bash
#fi

# sheldon
export SHELDON_CONFIG_DIR="$XDG_CONFIG_HOME/sheldon/bash"
export SHELDON_DATA_DIR="$XDG_DATA_HOME/sheldon/bash"

if command -v sheldon >/dev/null 2>&1; then
    eval "$(sheldon source)"
fi

# PHP composer
export COMPOSER_CONFIG_HOME="$XDG_CONFIG_HOME/composer"
export COMPOSER_BIN_DIR="$COMPOSER_CONFIG_HOME/vendor/bin"

export PATH="$COMPOSER_BIN_DIR:$PATH"

# Julia
export PATH="$HOME/.juliaup/bin:$PATH"

# mocword dict
export MOCWORD_DATA="$XDG_CACHE_HOME/mocword.sqlite"

# mdbook completion
if command -v mdbook >/dev/null 2>&1; then
    eval "$(mdbook completions bash)"
fi

# neovim version manager

# bob-nvim
export BOB_CONFIG="$XDG_CONFIG_HOME/bob/config.toml"
export BOB_BIN_DIR="$XDG_DATA_HOME/bob/nvim-bin"

# nvs
export NVS_BIN_DIR="$XDG_DATA_HOME/nvs/bin"

if [[ "$USE_NVIM_VERSION_MANAGER" == "bob" ]]; then
    export PATH="$BOB_BIN_DIR:$PATH"
fi

if [[ "$USE_NVIM_VERSION_MANAGER" == "nvs" ]]; then
    export PATH="$NVS_BIN_DIR:$PATH"
fi

alias vim=nvim

# Neovide env-vars
## Functionality
### Frame
#export NEOVIDE_FRAME="full"
#export NEOVIDE_FRAME="none"
# macOS Only
#export NEOVIDE_FRAME="transparent"
# macOS Only
#export NEOVIDE_FRAME="buttonless"

### Maximized
# NOTE: not documented
#export NEOVIDE_MAXIMIZED=true

### Multigrid
# NOTE: not documented
#export NEOVIDE_NO_MULTIGRID=true

### Fork
#export NEOVIDE_FORK=0

### No Idle
#export NEOVIDE_IDLE=0

### Title
# macOS Only
# NOTE: not documented
#export NEOVIDE_TITLE_HIDDEN=false

### sRGB
#export NEOVIDE_SRGB=0

### Tabs
#export NEOVIDE_TABS=0

### No VSync
#export NEOVIDE_VSYNC=0

### Neovim Binary
#export NEOVIM_BIN="/path/to/nvim"

### Wayland / X11
# Linux Only
# NOTE: Incomprehensible
#export NEOVIDE_APP_ID="wayland_app_id"
#export NEOVIDE_WM_CLASS_INSTANCE="x11_wm_class_instance"
#export NEOVIDE_WM_CLASS="x11_wm_class"

# nimble
export PATH="$HOME/.nimble/bin:$PATH"

# atuin
if command -v atuin >/dev/null 2>&1; then
    eval "$(atuin init bash)"
    atuin gen-completions --shell bash
fi

# rebar3
if command -v rebar3 >/dev/null 2>&1; then
    export PATH="$XDG_CACHE_HOME/rebar3/bin:$PATH"
fi

# age public keys
export AGE_PUBKEY_HOME="age1cktdwc8u4z76kawluyswaruyeg7eg6078rw3t0kkmx5wqkk40d2qzajn8y"
export AGE_PUBKEY_WORK="age1n03v0casqk2djs2jw3xq5ldpdjtp2s6r0u3uhtmd7zv9j2xuyf6qpl9x7l"
# TODO: config
export AGE_PUBKEY_AZUSA=""

{{ if (eq .chezmoi.hostname "TanakaPC") -}}
export AGE_PUBKEY="$AGE_PUBKEY_HOME"
{{ else -}}
export AGE_PUBKEY="$AGE_PUBKEY_WORK"
{{ end -}}

# golang
export GOPATH="$HOME/go"
export GOBIN="$GOPATH/bin"
export PATH="$GOBIN:$PATH"

# pay-respects
if command -v pay-respects >/dev/null 2>&1; then
    eval "$(pay-respects bash --alias)"
fi

# jujutsu
if command -v jj >/dev/null 2>&1; then
    source | jj util completion bash
fi

# sunbeam
if command -v sunbeam >/dev/null 2>&1; then
    sunbeam completion bash | source
fi

# zettelkasten
export zettelkasten_root="$GHQ_ROOT/codeberg.org/mimikun/zettelkasten"

# vfox
# NOTE: can't use it now
#if command -v vfox >/dev/null 2>&1; then
#    eval "$(vfox activate bash)"
#fi

# srgn
if command -v srgn >/dev/null 2>&1; then
    eval "$(srgn --completions bash)"
fi

# go-task
if command -v task >/dev/null 2>&1; then
    eval "$(task --completion bash)"
fi

# Claude Desktop
export CLAUDE_DESKTOP_PATH="$WIN_HOME/AppData/Roaming/Claude.json"
export CLAUDE_DESKTOP_CONFIG="$CLAUDE_DESKTOP_PATH/claude_desktop_config.json"

# pixi
if command -v pixi >/dev/null 2>&1; then
    eval "$(pixi completion --shell bash)"
fi

{{ else if eq .chezmoi.os "darwin" -}}
# macOSのとき
{{ else if eq .chezmoi.os "windows" -}}
# Windowsのとき
export GHQ_ROOT=~/ghq
export GHQ_SELECTOR=fzf
export TZ="Asia/Tokyo"

alias vim=nvim
alias patch="patch -p1 <"
{{ else -}}
# その他OSのとき
{{ end -}}

if [ -f ~/.local/share/blesh/ble.sh ]; then
    [[ ! ${BLE_VERSION-} ]] || ble-attach
fi

#[ ! -f "$HOME/.x-cmd.root/X" ] || . "$HOME/.x-cmd.root/X" # boot up x-cmd.

# vim:ft=bash.chezmoitmpl
