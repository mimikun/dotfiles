# All platform 共通
export EDITOR=nvim
export LESS="-R"
export LESSCHARSET="utf-8"
export PAGER=less
export GIT_PAGER=less

# XDG Base Directory
export XDG_CONFIG_HOME="$HOME/.config"
export XDG_CACHE_HOME="$HOME/.cache"
export XDG_DATA_HOME="$HOME/.local/share"
export XDG_STATE_HOME="$HOME/.local/state"

{{ if (eq .chezmoi.hostname "azusa") -}}
export GTK_IM_MODULE="fcitx"
export QT_IM_MODULE="fcitx"
export XMODIFIERS="@im=fcitx"
# CapsLock to Ctrl
setxkbmap -option ctrl:nocaps
{{ end -}}

{{ if eq .chezmoi.os "linux" -}}
# Linuxのとき
case $- in
    *i*) ;;
      *) return;;
esac

HISTCONTROL=ignoreboth
shopt -s histappend
HISTSIZE=1000
HISTFILESIZE=2000
shopt -s checkwinsize
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
    color_prompt=yes
    else
    color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

case "$TERM" in
xterm*|rxvt*)
    PS1='\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1'
    ;;
*)
    ;;
esac

if [ -x /usr/bin/dircolors ]; then
    if test -r ~/.dircolors
    then
        eval "$(dircolors -b ~/.dircolors)"
    else
        eval "$(dircolors -b)"
    fi
    alias ls='ls --color=auto'
    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi
#--------------------------------------------------------------------------------------

# chezmoi
export CHEZMOI_DIR="$XDG_DATA_HOME/chezmoi"

# 仕事PCでのみdockerd実行チェックをする
{{ if (eq .chezmoi.hostname "TanakaPC") -}}
# Start Docker daemon automatically when logging in if not running.
RUNNING=$(pgrep -f dockerd)
if [ -z "$RUNNING" ]; then
    sudo dockerd > /dev/null 2>&1 &
    disown
fi
{{ end -}}

# env-vars
{{ if eq .chezmoi.hostname "TanakaPC" -}}
export GITHUB_USERNAME="{{ (bitwardenFields "item" "0f17c992-d0fe-4f36-bde8-95d9e2de3a6d").github_username.value }}"
export WIN_HOME="/mnt/c/Users/{{ (bitwardenFields "item" "0f17c992-d0fe-4f36-bde8-95d9e2de3a6d").windows_user_name.value }}"
export OBSIDIAN_VAULT_ROOT="{{ (bitwardenFields "item" "0f17c992-d0fe-4f36-bde8-95d9e2de3a6d").obsidian_vault_root_path.value }}"
{{ else -}}
    {{ if eq .chezmoi.os "linux" -}}
export GITHUB_USERNAME="{{ (rbwFields "dotfiles-chezmoi").github_username.value }}"
        {{ if eq .chezmoi.hostname "azusa" -}}
export OBSIDIAN_VAULT_ROOT="$HOME/Documents/Obsidian/mimikun"
export LG_CONFIG_FILE="$XDG_CONFIG_HOME/lazygit/linux_config.yml"
        {{ else -}}
export WIN_HOME="/mnt/c/Users/{{ (rbwFields "dotfiles-chezmoi").windows_user_name.value }}"
export OBSIDIAN_VAULT_ROOT="{{ (rbwFields "dotfiles-chezmoi").obsidian_vault_root_path.value }}"
export LG_CONFIG_FILE="$XDG_CONFIG_HOME/lazygit/wsl_config.yml"
        {{ end -}}
    {{ else -}}
export GITHUB_USERNAME="{{ (bitwardenFields "item" "ec557677-82d9-4a61-a4f6-aed300cfb34f").github_username.value }}"
export WIN_HOME="/mnt/c/Users/{{ (bitwardenFields "item" "ec557677-82d9-4a61-a4f6-aed300cfb34f").windows_user_name.value }}"
export OBSIDIAN_VAULT_ROOT="{{ (bitwardenFields "item" "ec557677-82d9-4a61-a4f6-aed300cfb34f").obsidian_vault_root_path.value }}"
    {{ end -}}
{{ end -}}

export WORKSPACE="$GHQ_ROOT/github.com/$GITHUB_USERNAME"
export WORKSPACE_MIMIKUN="$GHQ_ROOT/github.com/mimikun"
export NVIM_DEV_PLUGINS="$WORKSPACE_MIMIKUN/dev-plugins"

{{ if (ne .chezmoi.hostname "azusa") -}}
export windl="$WIN_HOME/Downloads"
export WIN_DESKTOP="$WIN_HOME/Desktop"
export WIN_DOCUMENTS="$WIN_HOME/Documents"

export obsidian_vault_root_path="$WIN_DOCUMENTS/$OBSIDIAN_VAULT_ROOT"
export DISPLAY=":0"
{{ else -}}
export obsidian_vault_root_path="$OBSIDIAN_VAULT_ROOT"
{{ end -}}

export obsidian_vault_path=$obsidian_vault_root_path
export obsidian_dailynote_path=$obsidian_vault_path/001_DailyNotes
export obsidian=$obsidian_dailynote_path

# zoxide
if command -v zoxide >/dev/null 2>&1; then
    eval "$(zoxide init bash)"
fi

# starship
export STARSHIP_CONFIG="$XDG_CONFIG_HOME/starship/starship.toml"
export STARSHIP_CACHE="$XDG_CONFIG_HOME/.config/starship/cache"

if command -v starship >/dev/null 2>&1; then
    eval "$(starship init bash)"
fi

# fly.io
export FLYCTL_INSTALL="$HOME/.fly"
export PATH="$FLYCTL_INSTALL/bin:$PATH"

# pnpm
export PNPM_HOME="$XDG_DATA_HOME/pnpm"
export PATH="$PNPM_HOME:$PATH"
PNPM_COMPLETE="$XDG_CONFIG_HOME/tabtab/bash/__tabtab.bash"
if test -f "$PNPM_COMPLETE"; then
    . "$PNPM_COMPLETE"
fi

# broot
if command -v broot >/dev/null 2>&1; then
    source "$XDG_CONFIG_HOME/broot/launcher/bash/br"
fi

# Rye
if command -v rye >/dev/null 2>&1; then
    source "$HOME/.rye/env"
fi

# Linuxbrew
if command -v brew >/dev/null 2>&1; then
    eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
fi

# walk
function lk {
    cd "$(walk "$@")"
}

# mise
export MISE_CONFIG_DIR="$XDG_CONFIG_HOME/mise"
export MISE_DATA_DIR="$XDG_DATA_HOME/mise"
export MISE_CACHE_DIR="$XDG_CACHE_HOME/mise"
export MISE_GLOBAL_CONFIG_FILE="$MISE_CONFIG_DIR/config.toml"
export MISE_USE_VERSIONS_HOST=true
export MISE_LEGACY_VERSION_FILE=1
export MISE_LOG_FILE="$MISE_CACHE_DIR/mise.log"
export MISE_ASDF_COMPAT=1 
# If not human rights, MISE_JOBS = 1.
{{ if (eq .chezmoi.hostname "TanakaPC") -}}
export MISE_JOBS=1
{{ else -}}
export MISE_JOBS=4
{{ end -}}
#export MISE_SHORTHANDS_FILE="$MISE_CONFIG_DIR/shorthands.toml"
export MISE_YES=1
export MISE_NOT_FOUND_AUTO_INSTALL=false
export MISE_EXPERIMENTAL=1
export MISE_FISH_AUTO_ACTIVATE=1
eval "$(mise activate bash)"
export PATH="$XDG_DATA_HOME/mise/shims:$PATH"
alias paleovim="$MISE_DATA_DIR/shims/vim"
alias pvim=paleovim

# luarocks
export PATH="$HOME/.luarocks/bin:$PATH"
export LUA_PATH="/usr/local/share/lua/5.3/?.lua;/usr/local/share/lua/5.3/?/init.lua;/usr/local/lib/lua/5.3/?.lua;/usr/local/lib/lua/5.3/?/init.lua;./?.lua;./?/init.lua;$HOME/.luarocks/share/lua/5.3/?.lua;$HOME/.luarocks/share/lua/5.3/?/init.lua"
export LUA_CPATH="/usr/local/lib/lua/5.3/?.so;/usr/local/lib/lua/5.3/loadall.so;./?.so;$HOME/.luarocks/lib/lua/5.3/?.so"

# aqua
export AQUA_ROOT_DIR="$XDG_DATA_HOME/aqua"
export AQUA_CONFIG_DIR="$XDG_CONFIG_HOME/aqua"
export AQUA_BIN="$AQUA_ROOT_DIR/bin"

export PATH="$AQUA_BIN:$PATH"

if command -v aqua >/dev/null 2>&1; then
    export AQUA_CONFIG="$AQUA_CONFIG_DIR/aqua.yaml"
    export AQUA_GLOBAL_CONFIG="$AQUA_CONFIG"
    export AQUA_POLICY_CONFIG="$XDG_CONFIG_HOME/aqua/policy.yaml"
    # If true, Policy is disabled
    # NOTE: It's just idiot to care about security.
    export AQUA_DISABLE_POLICY=true
    {{ if (eq .chezmoi.hostname "TanakaPC") -}}
    export AQUA_MAX_PARALLELISM=1
    {{ else -}}
    export AQUA_MAX_PARALLELISM=5
    {{ end -}}
    export AQUA_PROGRESS_BAR=true
fi

# inshellisense
#if test -f ~/.inshellisense/key-bindings.bash
#then
#    source ~/.inshellisense/key-bindings.bash
#fi

# sheldon
export SHELDON_CONFIG_DIR="$XDG_CONFIG_HOME/sheldon/bash"
export SHELDON_DATA_DIR="$XDG_DATA_HOME/sheldon/bash"

if command -v sheldon >/dev/null 2>&1; then
    eval "$(sheldon source)"
fi

# PHP composer
export COMPOSER_CONFIG_HOME="$XDG_CONFIG_HOME/composer"
export COMPOSER_BIN_DIR="$COMPOSER_CONFIG_HOME/vendor/bin"

export PATH="$COMPOSER_BIN_DIR:$PATH"

# Julia
export PATH="$HOME/.juliaup/bin:$PATH"

# mocword dict
export MOCWORD_DATA="$XDG_CACHE_HOME/mocword.sqlite"

# mdbook completion
if command -v mdbook >/dev/null 2>&1; then
    eval "$(mdbook completions bash)"
fi

# bob neovim version manager
export BOB_CONFIG="$XDG_CONFIG_HOME/bob/config.toml"
export PATH="$XDG_DATA_HOME/bob/nvim-bin:$PATH"
alias vim=nvim

# Neovide env-vars
## Functionality
### Frame
#export NEOVIDE_FRAME="full"
#export NEOVIDE_FRAME="none"
# macOS Only
#export NEOVIDE_FRAME="transparent"
# macOS Only
#export NEOVIDE_FRAME="buttonless"

### Maximized
# NOTE: not documented
#export NEOVIDE_MAXIMIZED=true

### Multigrid
# NOTE: not documented
#export NEOVIDE_NO_MULTIGRID=true

### Fork
#export NEOVIDE_FORK=0

### No Idle
#export NEOVIDE_IDLE=0

### Title
# macOS Only
# NOTE: not documented
#export NEOVIDE_TITLE_HIDDEN=false

### sRGB
#export NEOVIDE_SRGB=0

### Tabs
#export NEOVIDE_TABS=0

### No VSync
#export NEOVIDE_VSYNC=0

### Neovim Binary
#export NEOVIM_BIN="/path/to/nvim"

### Wayland / X11
# Linux Only
# NOTE: Incomprehensible
#export NEOVIDE_APP_ID="wayland_app_id"
#export NEOVIDE_WM_CLASS_INSTANCE="x11_wm_class_instance"
#export NEOVIDE_WM_CLASS="x11_wm_class"

{{ else if eq .chezmoi.os "darwin" -}}
# macOSのとき
{{ else if eq .chezmoi.os "windows" -}}
# Windowsのとき
export GHQ_ROOT=~/ghq
export GHQ_SELECTOR=fzf
export TZ="Asia/Tokyo"

alias vim=nvim
alias patch="patch -p1 <"
{{ else -}}
# その他OSのとき
{{ end -}}
